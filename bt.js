/**
 * ========================================================================
 * SISTEMA BANCO DE TALENTOS - PROGRAMA GOVERNO EFICAZ
 * Santana de Parna√≠ba - SP
 * ========================================================================
 * 
 * Sistema automatizado para consolida√ß√£o de dados do Banco de Talentos
 * das 23 secretarias municipais em uma planilha central.
 * 
 * Funcionalidades:
 * - Consolida√ß√£o autom√°tica de dados das secretarias
 * - Preven√ß√£o de duplicatas por nome e prontu√°rio
 * - Interface com bot√µes Atualizar e Sobre
 * - Logs detalhados de execu√ß√£o
 * - Tratamento robusto de erros
 * 
 * @author Sistema desenvolvido para SMA - Secretaria Municipal de Administra√ß√£o lUANA 41331
 * @version 2.0 - Otimizada para Google Apps Script
 * ========================================================================
 */

// ========================================================================
// CONFIGURA√á√ïES GLOBAIS
// ========================================================================

/**
 * IDs das 23 planilhas das secretarias municipais
 * Extra√≠dos automaticamente das URLs fornecidas
 */
const PLANILHAS_SECRETARIAS = [
    "1Z6rfDo09m2nUQIjjAS0S3iuweToHAtIXK9idRb-RzuA",
    "14W2ewZBf-MgoKUYewj7--FLjDC1lVL6-5EUpHTHDoqU", 
    "15ztEc0wlK1mkrRd-DYkfXUn-Vq-k2JT0yLV-JaMeYV4",
    "1u7L6Qh57zFqQRCPNTJLGGReuEBlykCnD65SwwNFeRNA",
    "1Nc9O1Ha038gKY5LcfxUVClhTq6rsR0zghdSJqfScI6k",
    "1QrRoRoOsyrKgFIitAYWl1g53zYyxymWnoQCVBsRyHsM",
    "1rlyWJDE3srgUMyJy2eDlNrA4Sp57Njca9oypUkRSpP8",
    "1_4d9POGUbjKHHGPCcbQGx3-wLQuSmThKlLsFG98vDpw",
    "1n5JfTcpy8EtSlBY-bT3JLqV5kECrN_QeSM79TXbEZjk",
    "1giGaLo8jtOJ2VCSFcwhULFR5aYZcgPdifSfIKHXAm1A",
    "1WBOuLGg7hwFY7ehP1qKmuzN8-ZJR12GhMdYcNDCYHz0",
    "1cWASt4ldQbIEFm0XW1xPd7zJJZ9kNjGCylgc5XQIbPg",
    "1n2UuXYvKzz1Dau32aFwVhHLWzt2brClbJ_CFcpVa3Ks",
    "16SHJbhAb7XVmEhREFX_cVFeR2xtczizXjvpaUAwpFAk",
    "1xIWtAH9P7HZzjzroFG01KhtvRmy-sKV1YxCCBmOBxJo",
    "1qWSF0f7wVmJPM7Ht2_dtBPDBztt8PyyFwdL9rwwGTBM",
    "1eSp1C9K-AO2ZJr3ApFuDDlhGhsJXcvbxZZUn04VildM",
    "1AhWPtTgLqF_VEBNM6HxcxxJl5bkaRG5MLHPIX3Pa-3Y",
    "1EObh9xVjRqrPY1Fdz_ji7Nzq-2lcHXZKJysF6SJf66w",
    "17dEVkFJNNGanitiJYnT7Lwqz3DWsz8qODZA0K7Quggs",
    "1klqCbpMJVyCXTdpBkNrsrVfZozEOFWi1VT0xZjjSf8g",
    "1SjSlad1XQTPA0PqPUrpB7WMfPO0WxWV1f7SpHvhubrQ",
    "1LPaScCjVYVK6OVA5ZTeUXj3PXiM3nq_1GUdyiTru0jk"
  ];
  
  /**
   * Configura√ß√µes do sistema
   */
  const CONFIG = {
    ABA_CENTRAL: "BT 2025",
    ABA_ORIGEM: "Banco de Talentos (Externo)",
    LINHA_INICIO_DADOS: 4, // Ignorar linhas 1-4 (cabe√ßalhos)
    TIMEOUT_POR_PLANILHA: 10000, // 10 segundos por planilha
    MAX_TENTATIVAS: 3
  };
  
  /**
   * Cabe√ßalhos da planilha central (baseados na an√°lise do CSV)
   */
  const CABECALHOS_CENTRAL = [
    "Secretaria",
    "Nome", 
    "Prontu√°rio",
    "Forma√ß√£o Acad√™mica",
    "√Årea de Forma√ß√£o", 
    "Cargo Concurso",
    "CC / FE",
    "Fun√ß√£o Gratificada",
    "Readaptado",
    "Justificativa",
    "A√ß√£o (o que)",
    "Condicionalidade", 
    "Data da Libera√ß√£o"
  ];
  
  // ========================================================================
  // FUN√á√ÉO PRINCIPAL - EXECUTADA NA ABERTURA
  // ========================================================================
  
  /**
   * Fun√ß√£o executada automaticamente ao abrir a planilha
   * Configura o menu personalizado e executa importa√ß√£o inicial
   */
  function onOpen() {
    try {
      criarMenuPersonalizado();
      Logger.log("‚úÖ Menu personalizado criado com sucesso");
      
      // Executar importa√ß√£o autom√°tica
      SpreadsheetApp.getUi().alert(
        "üîÑ Sistema Banco de Talentos",
        "Iniciando importa√ß√£o autom√°tica dos dados...\nEste processo pode demorar alguns minutos.",
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
      importarBancoDeTalentos();
      
    } catch (erro) {
      Logger.log("‚ùå Erro na inicializa√ß√£o: " + erro.toString());
      SpreadsheetApp.getUi().alert(
        "‚ö†Ô∏è Erro na Inicializa√ß√£o", 
        "Ocorreu um erro ao inicializar o sistema. Verifique os logs para mais detalhes.",
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
  }
  
  /**
   * Cria menu personalizado na planilha
   */
  function criarMenuPersonalizado() {
    const ui = SpreadsheetApp.getUi();
    
    ui.createMenu("üèõÔ∏è Banco de Talentos")
      .addItem("üîÑ Atualizar Dados", "importarBancoDeTalentos")
      .addSeparator()
      .addItem("‚ÑπÔ∏è Sobre o Sistema", "exibirSobre")
      .addItem("üìä Relat√≥rio de Execu√ß√£o", "gerarRelatorioExecucao")
      .addItem("üßπ Limpar Dados", "limparDadosCentral")
      .addToUi();
  }
  
  // ========================================================================
  // FUN√á√ÉO PRINCIPAL DE IMPORTA√á√ÉO
  // ========================================================================
  
  /**
   * Fun√ß√£o principal para importar dados do Banco de Talentos
   * Consolida dados de todas as 23 secretarias
   */
  function importarBancoDeTalentos() {
    const inicioExecucao = new Date();
    let relatorioExecucao = {
      inicio: inicioExecucao,
      secretariasProcessadas: 0,
      registrosImportados: 0,
      erros: [],
      duplicatasEvitadas: 0
    };
    
    try {
      Logger.log("üöÄ === INICIANDO IMPORTA√á√ÉO DO BANCO DE TALENTOS ===");
      Logger.log(`üìÖ Data/Hora: ${inicioExecucao.toLocaleString('pt-BR')}`);
      
      // Obter planilha central
      const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
      const abaCentral = obterOuCriarAbaCentral(planilhaCentral);
      
      // Limpar dados existentes e configurar cabe√ßalhos
      configurarAbaCentral(abaCentral);
      
      // Controle de duplicatas
      const registrosExistentes = new Set();
      let ultimaLinha = 2; // Come√ßar ap√≥s o cabe√ßalho
      
      // Processar cada planilha
      PLANILHAS_SECRETARIAS.forEach((planilhaId, indice) => {
        try {
          Logger.log(`üìÇ Processando planilha ${indice + 1}/23: ${planilhaId}`);
          
          const resultado = processarPlanilhaSecretaria(planilhaId, registrosExistentes);
          
          if (resultado.sucesso && resultado.dados.length > 0) {
            // Inserir dados na planilha central
            const range = abaCentral.getRange(
              ultimaLinha, 1, 
              resultado.dados.length, 
              CABECALHOS_CENTRAL.length
            );
            range.setValues(resultado.dados);
            
            ultimaLinha += resultado.dados.length;
            relatorioExecucao.registrosImportados += resultado.dados.length;
            
            Logger.log(`‚úÖ Secretaria ${resultado.siglaSecretaria}: ${resultado.dados.length} registros importados`);
          }
          
          if (resultado.duplicatasEvitadas > 0) {
            relatorioExecucao.duplicatasEvitadas += resultado.duplicatasEvitadas;
            Logger.log(`üîç Duplicatas evitadas: ${resultado.duplicatasEvitadas}`);
          }
          
          relatorioExecucao.secretariasProcessadas++;
          
        } catch (erro) {
          const mensagemErro = `Erro na planilha ${indice + 1} (${planilhaId}): ${erro.toString()}`;
          Logger.log(`‚ùå ${mensagemErro}`);
          relatorioExecucao.erros.push(mensagemErro);
        }
        
        // Pequena pausa para evitar limite de API
        Utilities.sleep(500);
      });
      
      // Finalizar relat√≥rio
      relatorioExecucao.fim = new Date();
      relatorioExecucao.duracao = Math.round((relatorioExecucao.fim - relatorioExecucao.inicio) / 1000);
      
      // Aplicar formata√ß√£o √† planilha
      aplicarFormatacao(abaCentral, ultimaLinha - 1);
      
      // Exibir resultados
      exibirResultadoImportacao(relatorioExecucao);
      
      Logger.log("üéâ === IMPORTA√á√ÉO CONCLU√çDA COM SUCESSO ===");
      
    } catch (erro) {
      Logger.log("üí• ERRO CR√çTICO NA IMPORTA√á√ÉO: " + erro.toString());
      SpreadsheetApp.getUi().alert(
        "‚ùå Erro Cr√≠tico",
        `Ocorreu um erro cr√≠tico durante a importa√ß√£o:\n\n${erro.toString()}\n\nVerifique os logs para mais detalhes.`,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
  }
  
  // ========================================================================
  // FUN√á√ïES DE PROCESSAMENTO DE DADOS
  // ========================================================================
  
  /**
   * Processa uma planilha individual de secretaria
   * @param {string} planilhaId - ID da planilha no Google Drive
   * @param {Set} registrosExistentes - Set para controle de duplicatas
   * @returns {Object} Resultado do processamento
   */
  function processarPlanilhaSecretaria(planilhaId, registrosExistentes) {
    let tentativa = 1;
    
    while (tentativa <= CONFIG.MAX_TENTATIVAS) {
      try {
        // Abrir planilha externa
        const planilhaExterna = SpreadsheetApp.openById(planilhaId);
        const nomeCompleto = planilhaExterna.getName();
        
        // Extrair sigla da secretaria do nome da planilha
        const siglaSecretaria = extrairSiglaSecretaria(nomeCompleto);
        
        // Obter aba de dados
        const abaOrigem = planilhaExterna.getSheetByName(CONFIG.ABA_ORIGEM);
        if (!abaOrigem) {
          Logger.log(`‚ö†Ô∏è Aba "${CONFIG.ABA_ORIGEM}" n√£o encontrada em: ${nomeCompleto}`);
          return { sucesso: false, erro: "Aba n√£o encontrada" };
        }
        
        // Obter dados (ignorar linhas 1-4, colunas B-O exceto M)
        const ultimaLinha = abaOrigem.getLastRow();
        const ultimaColuna = abaOrigem.getLastColumn();
        
        if (ultimaLinha <= CONFIG.LINHA_INICIO_DADOS) {
          Logger.log(`‚ÑπÔ∏è Nenhum dado encontrado em: ${nomeCompleto}`);
          return { sucesso: true, dados: [], siglaSecretaria, duplicatasEvitadas: 0 };
        }
        
        // Ler dados das colunas B a O (√≠ndices 2 a 15)
        const dadosRange = abaOrigem.getRange(
          CONFIG.LINHA_INICIO_DADOS + 1, 2, // Linha 5, coluna B
          ultimaLinha - CONFIG.LINHA_INICIO_DADOS, 14 // At√© coluna O
        );
        
        const dadosBrutos = dadosRange.getValues();
        const dadosProcessados = [];
        let duplicatasEvitadas = 0;
        
        // Processar cada linha de dados
        dadosBrutos.forEach((linha, indice) => {
          // Verificar se linha n√£o est√° vazia
          if (linha.some(valor => valor !== "" && valor !== null && valor !== undefined)) {
            
            // Extrair dados relevantes (B-L, N-O, pular M)
            const nome = (linha[0] || "").toString().trim(); // Coluna B
            const prontuario = (linha[1] || "").toString().trim(); // Coluna C
            
            // Controle de duplicatas por nome + prontu√°rio
            const chaveUnica = `${nome}|${prontuario}`;
            if (registrosExistentes.has(chaveUnica) && nome && prontuario) {
              duplicatasEvitadas++;
              Logger.log(`üîç Duplicata evitada: ${nome} (${prontuario})`);
              return; // Pular este registro
            }
            
            // Marcar como processado
            if (nome && prontuario) {
              registrosExistentes.add(chaveUnica);
            }
            
            // Montar linha para planilha central
            const linhaCentral = [
              siglaSecretaria,              // A - Secretaria
              nome,                         // B - Nome
              prontuario,                   // C - Prontu√°rio
              linha[2] || "",              // D - Forma√ß√£o Acad√™mica
              linha[3] || "",              // E - √Årea de Forma√ß√£o
              linha[4] || "",              // F - Cargo Concurso
              linha[5] || "",              // G - CC / FE
              linha[6] || "",              // H - Fun√ß√£o Gratificada
              linha[7] || "",              // I - Readaptado
              linha[8] || "",              // J - Justificativa
              linha[9] || "",              // K - A√ß√£o (o que)
              linha[10] || "",             // L - Condicionalidade
              linha[13] || ""              // M - Data da Libera√ß√£o (era coluna O)
            ];
            
            dadosProcessados.push(linhaCentral);
          }
        });
        
        return {
          sucesso: true,
          dados: dadosProcessados,
          siglaSecretaria,
          duplicatasEvitadas
        };
        
      } catch (erro) {
        Logger.log(`‚ö†Ô∏è Tentativa ${tentativa}/${CONFIG.MAX_TENTATIVAS} falhou para ${planilhaId}: ${erro.toString()}`);
        tentativa++;
        
        if (tentativa <= CONFIG.MAX_TENTATIVAS) {
          Utilities.sleep(2000); // Aguardar 2 segundos antes de tentar novamente
        }
      }
    }
    
    return { 
      sucesso: false, 
      erro: `Falha ap√≥s ${CONFIG.MAX_TENTATIVAS} tentativas` 
    };
  }
  
  /**
   * Extrai a sigla da secretaria do nome da planilha
   * @param {string} nomeCompleto - Nome completo da planilha
   * @returns {string} Sigla da secretaria
   */
  function extrairSiglaSecretaria(nomeCompleto) {
    // Padr√£o: "PGE - Descri√ß√£o - SIGLA"
    const partes = nomeCompleto.split(" - ");
    
    if (partes.length >= 3) {
      // √öltima parte √© a sigla
      return partes[partes.length - 1].trim().toUpperCase();
    } else if (partes.length === 2) {
      // Se s√≥ tem 2 partes, a segunda √© a sigla
      return partes[1].trim().toUpperCase();
    } else {
      // Fallback: usar nome inteiro limitado
      return nomeCompleto.substring(0, 20).toUpperCase();
    }
  }
  
  // ========================================================================
  // FUN√á√ïES DE CONFIGURA√á√ÉO DA PLANILHA CENTRAL
  // ========================================================================
  
  /**
   * Obt√©m ou cria a aba central
   * @param {Spreadsheet} planilhaCentral - Objeto da planilha central
   * @returns {Sheet} Aba central
   */
  function obterOuCriarAbaCentral(planilhaCentral) {
    let abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
    
    if (!abaCentral) {
      Logger.log(`üìã Criando aba "${CONFIG.ABA_CENTRAL}"`);
      abaCentral = planilhaCentral.insertSheet(CONFIG.ABA_CENTRAL);
    }
    
    return abaCentral;
  }
  
  /**
   * Configura a aba central com cabe√ßalhos
   * @param {Sheet} abaCentral - Aba central
   */
  function configurarAbaCentral(abaCentral) {
    // Limpar conte√∫do existente
    abaCentral.clear();
    
    // Configurar cabe√ßalhos
    const rangeCabecalho = abaCentral.getRange(1, 1, 1, CABECALHOS_CENTRAL.length);
    rangeCabecalho.setValues([CABECALHOS_CENTRAL]);
    
    // Formata√ß√£o do cabe√ßalho
    rangeCabecalho
      .setBackground("#1f4e79")
      .setFontColor("#ffffff")
      .setFontWeight("bold")
      .setHorizontalAlignment("center")
      .setVerticalAlignment("middle")
      .setBorder(true, true, true, true, true, true);
    
    // Congelar primeira linha
    abaCentral.setFrozenRows(1);
    
    Logger.log("‚úÖ Aba central configurada com sucesso");
  }
  
  /**
   * Aplica formata√ß√£o √† planilha central
   * @param {Sheet} abaCentral - Aba central
   * @param {number} totalLinhas - Total de linhas com dados
   */
  function aplicarFormatacao(abaCentral, totalLinhas) {
    if (totalLinhas <= 1) return;
    
    try {
      // Range de dados (sem cabe√ßalho)
      const rangeDados = abaCentral.getRange(2, 1, totalLinhas - 1, CABECALHOS_CENTRAL.length);
      
      // Formata√ß√£o geral
      rangeDados
        .setVerticalAlignment("middle")
        .setBorder(true, true, true, true, true, true, "#cccccc", SpreadsheetApp.BorderStyle.SOLID);
      
      // Formata√ß√£o alternada de linhas
      const regraFormatacao = SpreadsheetApp.newConditionalFormatRule()
        .setRanges([rangeDados])
        .whenFormulaSatisfied('=MOD(ROW(),2)=0')
        .setBackground("#f8f9fa")
        .build();
      
      abaCentral.setConditionalFormatRules([regraFormatacao]);
      
      // Ajustar largura das colunas
      abaCentral.autoResizeColumns(1, CABECALHOS_CENTRAL.length);
      
      // Destacar coluna de secretaria
      const colunaSecretaria = abaCentral.getRange(2, 1, totalLinhas - 1, 1);
      colunaSecretaria
        .setBackground("#e8f4fd")
        .setFontWeight("bold");
      
      Logger.log("‚úÖ Formata√ß√£o aplicada com sucesso");
      
    } catch (erro) {
      Logger.log("‚ö†Ô∏è Erro na formata√ß√£o: " + erro.toString());
    }
  }
  
  // ========================================================================
  // FUN√á√ïES DE INTERFACE E RELAT√ìRIOS
  // ========================================================================
  
  /**
   * Exibe resultados da importa√ß√£o
   * @param {Object} relatorio - Dados do relat√≥rio de execu√ß√£o
   */
  function exibirResultadoImportacao(relatorio) {
    const mensagem = `
  üéâ IMPORTA√á√ÉO CONCLU√çDA!
  
  üìä RESUMO DA EXECU√á√ÉO:
  ‚Ä¢ Secretarias processadas: ${relatorio.secretariasProcessadas}/23
  ‚Ä¢ Registros importados: ${relatorio.registrosImportados}
  ‚Ä¢ Duplicatas evitadas: ${relatorio.duplicatasEvitadas}
  ‚Ä¢ Dura√ß√£o: ${relatorio.duracao}s
  ‚Ä¢ Erros: ${relatorio.erros.length}
  
  ${relatorio.erros.length > 0 ? '‚ö†Ô∏è ATEN√á√ÉO: Alguns erros ocorreram. Verifique os logs para detalhes.' : '‚úÖ Processo executado sem erros!'}
  
  üìÖ √öltima atualiza√ß√£o: ${relatorio.fim.toLocaleString('pt-BR')}
    `;
    
    SpreadsheetApp.getUi().alert(
      "üèõÔ∏è Sistema Banco de Talentos", 
      mensagem,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
  
  /**
   * Exibe informa√ß√µes sobre o sistema
   */
  function exibirSobre() {
    const sobre = `
  üèõÔ∏è SISTEMA BANCO DE TALENTOS
  Programa Governo Eficaz - Santana de Parna√≠ba
  
  ‚ú® MISS√ÉO DO PROGRAMA:
  "O Programa Governo Eficaz n√£o √© apenas uma ferramenta de gest√£o - √© um investimento estrat√©gico no futuro do nosso governo e no bem-estar e desenvolvimento dos nossos servidores."
  
  üéØ FILOSOFIA:
  "Um governo eficaz come√ßa com pessoas certas nos lugares certos"
  
  üîß FUNCIONALIDADES DO SISTEMA:
  ‚Ä¢ Consolida√ß√£o autom√°tica de dados das 23 secretarias
  ‚Ä¢ Preven√ß√£o inteligente de duplicatas
  ‚Ä¢ Interface intuitiva e relat√≥rios detalhados
  ‚Ä¢ Atualiza√ß√µes em tempo real
  
  üìû SUPORTE E CONTATO:
  D√∫vidas, suporte t√©cnico ou orienta√ß√µes:
  
  üìß sma.programagovernoeficaz@santanadeparnaiba.sp.gov.br
  üì± 4622-7500 - 8819 / 8644 / 7574
  
  üë• EQUIPE DE DESENVOLVIMENTO:
  Sistema desenvolvido para otimizar a gest√£o de talentos municipais, promovendo efici√™ncia e transpar√™ncia na administra√ß√£o p√∫blica.
  
  üöÄ VERS√ÉO: 2.0 - Otimizada para Google Apps Script
  üìÖ √öltima atualiza√ß√£o: ${new Date().toLocaleDateString('pt-BR')}
    `;
    
    SpreadsheetApp.getUi().alert(
      "‚ÑπÔ∏è Sobre o Sistema", 
      sobre,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
  
  /**
   * Gera relat√≥rio detalhado de execu√ß√£o
   */
  function gerarRelatorioExecucao() {
    try {
      const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
      const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
      
      if (!abaCentral) {
        SpreadsheetApp.getUi().alert(
          "‚ö†Ô∏è Relat√≥rio n√£o dispon√≠vel",
          "Execute primeiro a importa√ß√£o dos dados.",
          SpreadsheetApp.getUi().ButtonSet.OK
        );
        return;
      }
      
      const totalLinhas = abaCentral.getLastRow();
      const totalRegistros = Math.max(0, totalLinhas - 1); // Excluir cabe√ßalho
      
      // Contar registros por secretaria
      const estatisticasPorSecretaria = {};
      
      if (totalRegistros > 0) {
        const dadosSecretaria = abaCentral.getRange(2, 1, totalRegistros, 1).getValues();
        
        dadosSecretaria.forEach(linha => {
          const secretaria = linha[0] || "N√ÉO IDENTIFICADA";
          estatisticasPorSecretaria[secretaria] = (estatisticasPorSecretaria[secretaria] || 0) + 1;
        });
      }
      
      // Montar relat√≥rio
      let relatorioDetalhado = `
  üìä RELAT√ìRIO DETALHADO DE EXECU√á√ÉO
  
  üìà ESTAT√çSTICAS GERAIS:
  ‚Ä¢ Total de registros: ${totalRegistros}
  ‚Ä¢ Total de secretarias: ${Object.keys(estatisticasPorSecretaria).length}
  ‚Ä¢ Planilhas configuradas: ${PLANILHAS_SECRETARIAS.length}
  
  üè¢ DISTRIBUI√á√ÉO POR SECRETARIA:
  `;
      
      // Ordenar secretarias por quantidade de registros
      const secretariasOrdenadas = Object.entries(estatisticasPorSecretaria)
        .sort((a, b) => b[1] - a[1]);
      
      secretariasOrdenadas.forEach(([secretaria, quantidade]) => {
        relatorioDetalhado += `‚Ä¢ ${secretaria}: ${quantidade} registros\n`;
      });
      
      relatorioDetalhado += `
  üìÖ Data do relat√≥rio: ${new Date().toLocaleString('pt-BR')}
  üîÑ Para atualizar os dados, use o menu "Banco de Talentos > Atualizar Dados"
      `;
      
      SpreadsheetApp.getUi().alert(
        "üìä Relat√≥rio de Execu√ß√£o",
        relatorioDetalhado,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
    } catch (erro) {
      Logger.log("‚ùå Erro ao gerar relat√≥rio: " + erro.toString());
      SpreadsheetApp.getUi().alert(
        "‚ùå Erro no Relat√≥rio",
        "Ocorreu um erro ao gerar o relat√≥rio. Verifique os logs.",
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
  }
  
  /**
   * Limpa todos os dados da planilha central (mant√©m cabe√ßalhos)
   */
  function limparDadosCentral() {
    const resposta = SpreadsheetApp.getUi().alert(
      "üßπ Confirmar Limpeza",
      "Tem certeza que deseja limpar todos os dados da planilha central?\n\nEsta a√ß√£o n√£o pode ser desfeita.",
      SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    
    if (resposta === SpreadsheetApp.getUi().Button.YES) {
      try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (abaCentral) {
          // Limpar apenas dados (manter cabe√ßalhos)
          const ultimaLinha = abaCentral.getLastRow();
          if (ultimaLinha > 1) {
            abaCentral.getRange(2, 1, ultimaLinha - 1, abaCentral.getLastColumn()).clearContent();
          }
          
          SpreadsheetApp.getUi().alert(
            "‚úÖ Limpeza Conclu√≠da",
            "Todos os dados foram removidos. Os cabe√ßalhos foram mantidos.",
            SpreadsheetApp.getUi().ButtonSet.OK
          );
          
          Logger.log("üßπ Dados da planilha central limpos com sucesso");
        }
        
      } catch (erro) {
        Logger.log("‚ùå Erro na limpeza: " + erro.toString());
        SpreadsheetApp.getUi().alert(
          "‚ùå Erro na Limpeza",
          "Ocorreu um erro durante a limpeza dos dados.",
          SpreadsheetApp.getUi().ButtonSet.OK
        );
      }
    }
  }
  
  // ========================================================================
  // FUN√á√ïES UTILIT√ÅRIAS
  // ========================================================================
  
  /**
   * Fun√ß√£o de teste para verificar conectividade
   */
  function testarConectividade() {
    Logger.log("üß™ === TESTE DE CONECTIVIDADE ===");
    
    let sucessos = 0;
    let erros = 0;
    
    PLANILHAS_SECRETARIAS.slice(0, 5).forEach((id, indice) => {
      try {
        const planilha = SpreadsheetApp.openById(id);
        const nome = planilha.getName();
        Logger.log(`‚úÖ Planilha ${indice + 1}: ${nome}`);
        sucessos++;
      } catch (erro) {
        Logger.log(`‚ùå Planilha ${indice + 1} (${id}): ${erro.toString()}`);
        erros++;
      }
    });
    
    Logger.log(`üìä Resultado: ${sucessos} sucessos, ${erros} erros`);
    
    SpreadsheetApp.getUi().alert(
      "üß™ Teste de Conectividade",
      `Teste realizado em 5 planilhas:\n\n‚úÖ Sucessos: ${sucessos}\n‚ùå Erros: ${erros}\n\nVerifique os logs para detalhes.`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
  
  /**
   * Fun√ß√£o para backup dos dados atuais
   */
  function criarBackup() {
    try {
      const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
      const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
      
      if (!abaCentral || abaCentral.getLastRow() <= 1) {
        SpreadsheetApp.getUi().alert(
          "‚ö†Ô∏è Backup n√£o necess√°rio",
          "N√£o h√° dados para fazer backup.",
          SpreadsheetApp.getUi().ButtonSet.OK
        );
        return;
      }
      
      const dataHora = Utilities.formatDate(new Date(), "GMT-3", "yyyy-MM-dd_HH-mm");
      const nomeBackup = `Backup_BT_${dataHora}`;
      
      // Criar c√≥pia da aba
      const abaBackup = abaCentral.copyTo(planilhaCentral);
      abaBackup.setName(nomeBackup);
      
      SpreadsheetApp.getUi().alert(
        "üíæ Backup Criado",
        `Backup criado com sucesso!\n\nNome da aba: ${nomeBackup}`,
        SpreadsheetApp.getUi().ButtonSet.OK
      );
      
      Logger.log(`üíæ Backup criado: ${nomeBackup}`);
      
    } catch (erro) {
      Logger.log("‚ùå Erro no backup: " + erro.toString());
      SpreadsheetApp.getUi().alert(
        "‚ùå Erro no Backup",
        "N√£o foi poss√≠vel criar o backup dos dados.",
        SpreadsheetApp.getUi().ButtonSet.OK
      );
    }
  }
  
  // ========================================================================
  // LOGS E DEBUGGING
  // ========================================================================
  
  /**
   * Limpa logs antigos (executar manualmente se necess√°rio)
   */
  function limparLogs() {
    console.clear();
    Logger.log("üßπ Logs limpos - " + new Date().toLocaleString('pt-BR'));
  }
  
  /**
   * Exibe informa√ß√µes do sistema
   */
  function informacoesSistema() {
    Logger.log("üîß === INFORMA√á√ïES DO SISTEMA ===");
    Logger.log(`üìä Planilhas configuradas: ${PLANILHAS_SECRETARIAS.length}`);
    Logger.log(`üìã Aba central: ${CONFIG.ABA_CENTRAL}`);
    Logger.log(`üìÇ Aba origem: ${CONFIG.ABA_ORIGEM}`);
    Logger.log(`üöÄ Vers√£o: 2.0`);
    Logger.log(`üìÖ Data: ${new Date().toLocaleString('pt-BR')}`);
  }
  
  // ========================================================================
  // FIM DO C√ìDIGO
  // ========================================================================