/**
 * ========================================================================
 * SISTEMA BANCO DE TALENTOS - VERS√ÉO CORRIGIDA
 * Santana de Parna√≠ba - SP
 * ========================================================================
 * 
 * CORRE√á√ïES IMPLEMENTADAS:
 * 1. Extra√ß√£o correta da sigla das secretarias (usar array ao inv√©s do nome)
 * 2. Mapeamento correto das colunas conforme especifica√ß√£o
 * 3. Ordena√ß√£o alfab√©tica consistente das secretarias
 * 4. Dados come√ßam na linha 5 (LINHA_INICIO_DADOS = 4)
 * 
 * ========================================================================
 */

// ========================================================================
// CONFIGURA√á√ïES GLOBAIS CORRIGIDAS
// ========================================================================

/**
 * IDs das 23 planilhas das secretarias municipais - CORRIGIDO
 * Agora usando o nome definido no array como sigla oficial
 */
const PLANILHAS_SECRETARIAS = [
    { id: "1Z6rfDo09m2nUQIjjAS0S3iuweToHAtIXK9idRb-RzuA", nome: "SECOM" },
    { id: "14W2ewZBf-MgoKUYewj7--FLjDC1lVL6-5EUpHTHDoqU", nome: "SEMEDES" },
    { id: "15ztEc0wlK1mkrRd-DYkfXUn-Vq-k2JT0yLV-JaMeYV4", nome: "SEMOP" },
    { id: "1u7L6Qh57zFqQRCPNTJLGGReuEBlykCnD65SwwNFeRNA", nome: "SEMUTRANS" },
    { id: "1Nc9O1Ha038gKY5LcfxUVClhTq6rsR0zghdSJqfScI6k", nome: "SMA" },
    { id: "1QrRoRoOsyrKgFIitAYWl1g53zYyxymWnoQCVBsRyHsM", nome: "SMAFEL" },
    { id: "1rlyWJDE3srgUMyJy2eDlNrA4Sp57Njca9oypUkRSpP8", nome: "SMCC" },
    { id: "1_4d9POGUbjKHHGPCcbQGx3-wLQuSmThKlLsFG98vDpw", nome: "SMCL" },
    { id: "1n5JfTcpy8EtSlBY-bT3JLqV5kECrN_QeSM79TXbEZjk", nome: "SMCT" },
    { id: "1giGaLo8jtOJ2VCSFcwhULFR5aYZcgPdifSfIKHXAm1A", nome: "SMDS" },
    { id: "1WBOuLGg7hwFY7ehP1qKmuzN8-ZJR12GhMdYcNDCYHz0", nome: "SME" },
    { id: "1cWASt4ldQbIEFm0XW1xPd7zJJZ9kNjGCylgc5XQIbPg", nome: "SMF" },
    { id: "1n2UuXYvKzz1Dau32aFwVhHLWzt2brClbJ_CFcpVa3Ks", nome: "SMGAED" },
    { id: "16SHJbhAb7XVmEhREFX_cVFeR2xtczizXjvpaUAwpFAk", nome: "SMH" },
    { id: "1xIWtAH9P7HZzjzroFG01KhtvRmy-sKV1YxCCBmOBxJo", nome: "SMMAP" },
    { id: "1qWSF0f7wVmJPM7Ht2_dtBPDBztt8PyyFwdL9rwwGTBM", nome: "SMMF" },
    { id: "1eSp1C9K-AO2ZJr3ApFuDDlhGhsJXcvbxZZUn04VildM", nome: "SMNJ" },
    { id: "1AhWPtTgLqF_VEBNM6HxcxxJl5bkaRG5MLHPIX3Pa-3Y", nome: "SMOP" },
    { id: "1EObh9xVjRqrPY1Fdz_ji7Nzq-2lcHXZKJysF6SJf66w", nome: "SMOU" },
    { id: "17dEVkFJNNGanitiJYnT7Lwqz3DWsz8qODZA0K7Quggs", nome: "SMS" },
    { id: "1klqCbpMJVyCXTdpBkNrsrVfZozEOFWi1VT0xZjjSf8g", nome: "SMSD" },
    { id: "1SjSlad1XQTPA0PqPUrpB7WMfPO0WxWV1f7SpHvhubrQ", nome: "SMSM" },
    { id: "1LPaScCjVYVK6OVA5ZTeUXj3PXiM3nq_1GUdyiTru0jk", nome: "SMSU" }
];

/**
* Configura√ß√µes do sistema - CORRIGIDAS
*/
const CONFIG = {
    ABA_CENTRAL: "BT 2025",
    ABA_ORIGEM: "Banco de Talentos (Externo)",
    LINHA_INICIO_DADOS: 4, // Dados come√ßam na linha 5 (√≠ndice 4)
    LOTE_SIZE: 5,
    TIMEOUT_POR_LOTE: 30000,
    DELAY_ENTRE_LOTES: 2000,
    MAX_TENTATIVAS: 2
};

/**
* Cabe√ßalhos padronizados - CONFIRMADOS
*/
const CABECALHOS_CENTRAL = [
    "Secretaria",           // A
    "Nome",                 // B  
    "Prontu√°rio",          // C
    "Forma√ß√£o Acad√™mica",   // D
    "√Årea de Forma√ß√£o",     // E
    "Cargo Concurso",       // F
    "CC / FE",             // G
    "Fun√ß√£o Gratificada",   // H
    "Readaptado",          // I
    "Justificativa",       // J
    "A√ß√£o (o que)",        // K
    "Condicionalidade",    // L
    "Data da Inclus√£o"     // M
];

// ========================================================================
// FUN√á√ÉO PRINCIPAL CORRIGIDA - ORDENA√á√ÉO ALFAB√âTICA
// ========================================================================

/**
* Fun√ß√£o principal otimizada para importa√ß√£o - CORRIGIDA
*/
function importarBancoDeTalentosOtimizado() {
    const inicioExecucao = new Date();
    let relatorio = {
        inicio: inicioExecucao,
        secretariasProcessadas: 0,
        registrosImportados: 0,
        erros: [],
        lotes: []
    };
    
    try {
        Logger.log("üöÄ === INICIANDO IMPORTA√á√ÉO CORRIGIDA ===");
        
        // Preparar planilha central
        const { planilhaCentral, abaCentral } = prepararPlanilhaCentral();
        
        // ORDENAR SECRETARIAS ALFABETICAMENTE ANTES DO PROCESSAMENTO
        const secretariasOrdenadas = [...PLANILHAS_SECRETARIAS].sort((a, b) => 
            a.nome.localeCompare(b.nome)
        );
        
        Logger.log("üî§ Secretarias ordenadas alfabeticamente:");
        secretariasOrdenadas.forEach((s, i) => {
            Logger.log(`  ${i + 1}. ${s.nome}`);
        });
        
        // Coletar todos os dados primeiro
        const todosOsDados = [];
        
        // Processar em lotes (usando secretarias ordenadas)
        const lotes = criarLotes(secretariasOrdenadas, CONFIG.LOTE_SIZE);
        
        for (let i = 0; i < lotes.length; i++) {
            const lote = lotes[i];
            const numeroLote = i + 1;
            const totalLotes = lotes.length;
            
            // Mostrar progresso
            mostrarProgresso(numeroLote, totalLotes, lote.length);
            
            const resultadoLote = processarLoteSecretarias(lote, numeroLote);
            
            // Adicionar dados do lote aos dados totais (j√° em ordem alfab√©tica)
            todosOsDados.push(...resultadoLote.dados);
            
            // Atualizar relat√≥rio
            relatorio.secretariasProcessadas += resultadoLote.processadas;
            relatorio.erros.push(...resultadoLote.erros);
            relatorio.lotes.push(resultadoLote);
            
            // Pausa entre lotes
            if (i < lotes.length - 1) {
                Utilities.sleep(CONFIG.DELAY_ENTRE_LOTES);
            }
        }
        
        // Inserir todos os dados (j√° ordenados por secretaria)
        if (todosOsDados.length > 0) {
            Logger.log(`üìù Inserindo ${todosOsDados.length} registros ordenados...`);
            
            const range = abaCentral.getRange(2, 1, todosOsDados.length, CABECALHOS_CENTRAL.length);
            range.setValues(todosOsDados);
            
            relatorio.registrosImportados = todosOsDados.length;
            
            // Aplicar formata√ß√£o
            aplicarFormatacaoOtimizada(abaCentral, todosOsDados.length + 1);
        }
        
        // Finalizar
        relatorio.fim = new Date();
        relatorio.duracao = Math.round((relatorio.fim - relatorio.inicio) / 1000);
        
        exibirResultadoOtimizado(relatorio);
        
        Logger.log("üéâ === IMPORTA√á√ÉO CORRIGIDA CONCLU√çDA ===");
        
    } catch (erro) {
        Logger.log("üí• ERRO CR√çTICO: " + erro.toString());
        
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro na Importa√ß√£o",
            `Erro cr√≠tico durante a importa√ß√£o:\n\n${erro.toString()}\n\nüìã Alguns dados podem ter sido preservados.\nVerifique a planilha e os logs.`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

// ========================================================================
// PROCESSAMENTO INDIVIDUAL DE SECRETARIA - CORRIGIDO
// ========================================================================

/**
* Processa uma secretaria individual - VERS√ÉO CORRIGIDA
*/
function processarSecretariaOtimizada(secretaria) {
    try {
        // USAR A SIGLA DIRETAMENTE DO ARRAY - SEM EXTRA√á√ÉO DO NOME DA PLANILHA
        const siglaSecretaria = secretaria.nome; // Usar diretamente a sigla do array
        
        Logger.log(`üìÇ Processando: ${siglaSecretaria} (ID: ${secretaria.id.substring(0, 10)}...)`);
        
        // Abrir planilha
        const planilhaExterna = SpreadsheetApp.openById(secretaria.id);
        const nomeCompletoPlanilha = planilhaExterna.getName();
        
        Logger.log(`üìã Nome da planilha: ${nomeCompletoPlanilha}`);
        Logger.log(`üè∑Ô∏è Sigla usada: ${siglaSecretaria}`);
        
        // Verificar aba
        const abaOrigem = planilhaExterna.getSheetByName(CONFIG.ABA_ORIGEM);
        if (!abaOrigem) {
            return { 
                sucesso: false, 
                erro: `Aba "${CONFIG.ABA_ORIGEM}" n√£o encontrada`,
                siglaSecretaria 
            };
        }
        
        // Obter dados de forma otimizada
        const ultimaLinha = abaOrigem.getLastRow();
        
        if (ultimaLinha <= CONFIG.LINHA_INICIO_DADOS) {
            Logger.log(`‚ÑπÔ∏è Sem dados: ${siglaSecretaria}`);
            return { 
                sucesso: true, 
                dados: [], 
                siglaSecretaria 
            };
        }
        
        // ============================================================================
        // MAPEAMENTO CORRETO DAS COLUNAS - CONFIRMADO:
        // DADOS COME√áAM NA LINHA 5 (CONFIG.LINHA_INICIO_DADOS = 4)
        // B = Nome | C = Prontu√°rio | D = Forma√ß√£o | E = √Årea | F = Cargo 
        // G = CC/FE | H = Fun√ß√£o | I = Readaptado | J = Justificativa 
        // K = A√ß√£o | L = Condicionalidade | N = Data da Inclus√£o
        // ============================================================================
        
        // Calcular linhas de dados dispon√≠veis
        const totalLinhas = ultimaLinha - CONFIG.LINHA_INICIO_DADOS;
        
        Logger.log(`üìä ${siglaSecretaria}: Linha ${CONFIG.LINHA_INICIO_DADOS + 1} at√© ${ultimaLinha} (${totalLinhas} linhas)`);
        
        // Ler dados das colunas B at√© N 
        // B=2, C=3, D=4, E=5, F=6, G=7, H=8, I=9, J=10, K=11, L=12, M=13, N=14
        const dadosRange = abaOrigem.getRange(
            CONFIG.LINHA_INICIO_DADOS + 1, // Linha 5 (√≠ndice 4 + 1)
            2, // Coluna B (Nome) = √≠ndice 2
            totalLinhas, 
            13 // Colunas B at√© N (B=2 at√© N=14 = 13 colunas)
        );
        
        const dadosBrutos = dadosRange.getValues();
        
        Logger.log(`üìñ ${siglaSecretaria}: Lidas ${dadosBrutos.length} linhas de dados brutos`);
        
        // Processar dados com mapeamento correto
        const dadosProcessados = [];
        
        dadosBrutos.forEach((linha, indiceLinhaArray) => {
            const linhaReal = CONFIG.LINHA_INICIO_DADOS + 1 + indiceLinhaArray;
            
            // Verificar se linha tem dados (verificar pelo menos nome)
            const nome = (linha[0] || "").toString().trim(); // linha[0] = Nome (coluna B)
            
            if (nome) { // Se tem nome, processar a linha
                
                // Mapear corretamente conforme especifica√ß√£o:
                const linhaCentral = [
                    siglaSecretaria,                           // A - Secretaria (usar sigla do array)
                    nome,                                      // B - Nome (B na origem, √≠ndice 0)
                    (linha[1] || "").toString().trim(),        // C - Prontu√°rio (C na origem, √≠ndice 1)  
                    (linha[2] || "").toString().trim(),        // D - Forma√ß√£o Acad√™mica (D na origem, √≠ndice 2)
                    (linha[3] || "").toString().trim(),        // E - √Årea de Forma√ß√£o (E na origem, √≠ndice 3)
                    (linha[4] || "").toString().trim(),        // F - Cargo Concurso (F na origem, √≠ndice 4)
                    (linha[5] || "").toString().trim(),        // G - CC / FE (G na origem, √≠ndice 5)
                    (linha[6] || "").toString().trim(),        // H - Fun√ß√£o Gratificada (H na origem, √≠ndice 6)
                    (linha[7] || "").toString().trim(),        // I - Readaptado (I na origem, √≠ndice 7)
                    (linha[8] || "").toString().trim(),        // J - Justificativa (J na origem, √≠ndice 8)
                    (linha[9] || "").toString().trim(),        // K - A√ß√£o (o que) (K na origem, √≠ndice 9)
                    (linha[10] || "").toString().trim(),       // L - Condicionalidade (L na origem, √≠ndice 10)
                    formatarDataBrasileira(linha[12] || "")     // M - Data da Inclus√£o (N na origem, √≠ndice 12)
                ];
                
                dadosProcessados.push(linhaCentral);
                
                // Log detalhado para primeira linha de cada secretaria (debug)
                if (dadosProcessados.length === 1) {
                    Logger.log(`üîç ${siglaSecretaria} - Primeira linha (${linhaReal}): ${nome} | ${linhaCentral[2]} | ${linhaCentral[3]}`);
                }
            }
        });
        
        Logger.log(`‚úÖ ${siglaSecretaria}: ${dadosProcessados.length} registros processados`);
        
        return {
            sucesso: true,
            dados: dadosProcessados,
            siglaSecretaria: siglaSecretaria
        };
        
    } catch (erro) {
        Logger.log(`‚ùå Erro em ${secretaria.nome}: ${erro.toString()}`);
        return {
            sucesso: false,
            erro: erro.toString(),
            siglaSecretaria: secretaria.nome
        };
    }
}

// ========================================================================
// FUN√á√ÉO AUXILIAR PARA BUSCAR SIGLA POR ID (CASO NECESS√ÅRIO)
// ========================================================================

/**
* Busca sigla da secretaria pelo ID da planilha
*/
function buscarSiglaPorId(idPlanilha) {
    const secretaria = PLANILHAS_SECRETARIAS.find(s => s.id === idPlanilha);
    return secretaria ? secretaria.nome : "DESCONHECIDA";
}

/**
* Lista todas as secretarias em ordem alfab√©tica (para debug)
*/
function listarSecretariasOrdenadas() {
    const secretariasOrdenadas = [...PLANILHAS_SECRETARIAS].sort((a, b) => 
        a.nome.localeCompare(b.nome)
    );
    
    Logger.log("üî§ === SECRETARIAS EM ORDEM ALFAB√âTICA ===");
    secretariasOrdenadas.forEach((secretaria, indice) => {
        Logger.log(`${String(indice + 1).padStart(2, '0')}. ${secretaria.nome}`);
    });
    
    return secretariasOrdenadas;
}

// ========================================================================
// TESTE E VALIDA√á√ÉO DAS CORRE√á√ïES
// ========================================================================

/**
* Teste ESPEC√çFICO do mapeamento com UMA secretaria
*/
function testeMapemantoColunas() {
    Logger.log("üß™ === TESTE DO MAPEAMENTO DE COLUNAS ===");
    
    // Testar com a primeira secretaria da lista (SECOM)
    const secretariaTeste = PLANILHAS_SECRETARIAS[0]; 
    
    try {
        Logger.log(`üìã Testando: ${secretariaTeste.nome}`);
        
        const planilha = SpreadsheetApp.openById(secretariaTeste.id);
        const aba = planilha.getSheetByName(CONFIG.ABA_ORIGEM);
        
        if (!aba) {
            Logger.log(`‚ùå Aba n√£o encontrada: ${CONFIG.ABA_ORIGEM}`);
            return;
        }
        
        const ultimaLinha = aba.getLastRow();
        Logger.log(`üìä √öltima linha: ${ultimaLinha}`);
        
        if (ultimaLinha > CONFIG.LINHA_INICIO_DADOS) {
            // Ler cabe√ßalhos da planilha de origem
            const cabecalhos = aba.getRange(1, 1, 1, 20).getValues()[0];
            Logger.log("üìã Cabe√ßalhos encontrados:");
            cabecalhos.forEach((cab, indice) => {
                const coluna = String.fromCharCode(65 + indice); // A=65
                if (cab && cab.toString().trim()) {
                    Logger.log(`  ${coluna}${indice + 1}: ${cab}`);
                }
            });
            
            // Ler primeira linha de dados
            const primeiraLinhaDados = aba.getRange(CONFIG.LINHA_INICIO_DADOS + 1, 1, 1, 20).getValues()[0];
            Logger.log("üìã Primeira linha de dados:");
            primeiraLinhaDados.forEach((valor, indice) => {
                const coluna = String.fromCharCode(65 + indice);
                if (valor && valor.toString().trim()) {
                    Logger.log(`  ${coluna}: ${valor}`);
                }
            });
            
            // Testar processamento completo
            Logger.log("\nüîç === TESTE DE PROCESSAMENTO ===");
            const resultado = processarSecretariaOtimizada(secretariaTeste);
            
            if (resultado.sucesso && resultado.dados.length > 0) {
                const primeiroRegistro = resultado.dados[0];
                Logger.log("‚úÖ Primeiro registro processado:");
                CABECALHOS_CENTRAL.forEach((cabecalho, indice) => {
                    Logger.log(`  ${cabecalho}: ${primeiroRegistro[indice]}`);
                });
            }
        }
        
        const relatorio = `
üß™ TESTE DE MAPEAMENTO CONCLU√çDO

üìã Secretaria: ${secretariaTeste.nome}
üìä √öltima linha: ${ultimaLinha}

üîß AJUSTE APLICADO:
‚Ä¢ Leitura dos dados come√ßa na COLUNA B (Nome)
‚Ä¢ Ignora coluna A (pode ter numera√ß√£o ou estar vazia)

‚úÖ Verifique os logs do Apps Script para ver:
‚Ä¢ Cabe√ßalhos encontrados (B at√© T)
‚Ä¢ Primeira linha de dados (B at√© T)
‚Ä¢ Mapeamento aplicado
‚Ä¢ Primeiro registro processado

üìù PR√ìXIMO PASSO:
Se os dados estiverem corretos nos logs, execute "Importar Dados"
        `;
        
        SpreadsheetApp.getUi().alert(
            "üß™ Teste de Mapeamento",
            relatorio,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro no teste: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro no Teste",
            `Erro no teste de mapeamento:\n${erro.toString()}`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Validar estrutura de todas as secretarias
*/
function validarEstruturaSecretarias() {
    Logger.log("üîç === VALIDA√á√ÉO DE ESTRUTURA DAS SECRETARIAS ===");
    
    let sucessos = 0;
    let erros = [];
    
    PLANILHAS_SECRETARIAS.forEach((secretaria, indice) => {
        try {
            const planilha = SpreadsheetApp.openById(secretaria.id);
            const aba = planilha.getSheetByName(CONFIG.ABA_ORIGEM);
            
            if (aba) {
                const ultimaLinha = aba.getLastRow();
                Logger.log(`‚úÖ ${String(indice + 1).padStart(2, '0')}. ${secretaria.nome}: ${ultimaLinha} linhas`);
                sucessos++;
            } else {
                const erro = `Aba "${CONFIG.ABA_ORIGEM}" n√£o encontrada`;
                Logger.log(`‚ùå ${String(indice + 1).padStart(2, '0')}. ${secretaria.nome}: ${erro}`);
                erros.push(`${secretaria.nome}: ${erro}`);
            }
            
        } catch (erro) {
            Logger.log(`üí• ${String(indice + 1).padStart(2, '0')}. ${secretaria.nome}: ${erro.toString()}`);
            erros.push(`${secretaria.nome}: ${erro.toString()}`);
        }
        
        // Pausa para evitar timeout
        Utilities.sleep(100);
    });
    
    const resumo = `
üîç VALIDA√á√ÉO CONCLU√çDA:
‚úÖ Sucessos: ${sucessos}/${PLANILHAS_SECRETARIAS.length}
‚ùå Erros: ${erros.length}
üìä Taxa de sucesso: ${Math.round(sucessos/PLANILHAS_SECRETARIAS.length*100)}%
    `;
    
    Logger.log(resumo);
    
    if (erros.length > 0) {
        Logger.log("‚ùå Lista de erros:");
        erros.forEach(erro => Logger.log(`  ‚Ä¢ ${erro}`));
    }
    
    return { sucessos, erros, total: PLANILHAS_SECRETARIAS.length };
}

// ========================================================================
// MENU ATUALIZADO COM FUN√á√ïES DE TESTE
// ========================================================================

/**
* Cria menu com op√ß√µes de teste
*/
function criarMenuPersonalizadoCorrigido() {
    const ui = SpreadsheetApp.getUi();
    
    ui.createMenu("üèõÔ∏è Banco de Talentos v3.1")
        .addItem("üîÑ Importar Dados", "iniciarImportacaoManual")
        .addSeparator()
        .addItem("üìä Atualizar Secretaria Espec√≠fica", "atualizarSecretariaEspecifica")
        .addItem("üîç Verificar Dados Existentes", "verificarDadosExistentes")
        .addSeparator()
        .addSubMenu(ui.createMenu("üß™ Testes e Debug")
            .addItem("üß™ Testar Mapeamento", "testeMapemantoColunas")
            .addItem("üîç Validar Estruturas", "validarEstruturaSecretarias")
            .addItem("üî§ Listar Secretarias Ordenadas", "listarSecretariasOrdenadas")
            .addItem("üßπ Limpar Logs", "limparLogs"))
        .addSeparator()
        .addItem("üìà Relat√≥rio Completo", "gerarRelatorioCompleto")
        .addItem("üßπ Limpar e Reiniciar", "limparEReiniciar")
        .addSeparator()
        .addItem("‚ÑπÔ∏è Sobre o Sistema", "exibirSobre")
        .addToUi();
}

// ========================================================================
// INICIALIZA√á√ÉO CORRIGIDA
// ========================================================================

/**
* Fun√ß√£o executada ao abrir - VERS√ÉO CORRIGIDA
*/
function onOpen() {
    try {
        criarMenuPersonalizadoCorrigido();
        Logger.log("‚úÖ Menu personalizado corrigido criado");
        
        // Mostrar informa√ß√µes da vers√£o corrigida
        mostrarInstrucoesCorrigidas();
        
    } catch (erro) {
        Logger.log("‚ùå Erro na inicializa√ß√£o: " + erro.toString());
    }
}

/**
* Mostra instru√ß√µes da vers√£o corrigida
*/
function mostrarInstrucoesCorrigidas() {
    const instrucoes = `
üèõÔ∏è SISTEMA BANCO DE TALENTOS - VERS√ÉO 3.1 CORRIGIDA

üîß CORRE√á√ïES IMPLEMENTADAS:
‚Ä¢ ‚úÖ Sigla das secretarias: agora usa o array PLANILHAS_SECRETARIAS
‚Ä¢ ‚úÖ Mapeamento de colunas: corrigido conforme especifica√ß√£o
‚Ä¢ ‚úÖ Ordena√ß√£o alfab√©tica: secretarias sempre ordenadas
‚Ä¢ ‚úÖ In√≠cio dos dados: confirmado linha 5 (√≠ndice 4)

üß™ NOVAS OP√á√ïES DE TESTE:
‚Ä¢ "Testar Mapeamento" - verifica se as colunas est√£o corretas
‚Ä¢ "Validar Estruturas" - testa todas as secretarias
‚Ä¢ "Listar Secretarias Ordenadas" - mostra ordem alfab√©tica

‚ö° COMO USAR:
1. Execute "Testar Mapeamento" primeiro para verificar
2. Use "Importar Dados" para processamento completo
3. Dados ficar√£o ordenados alfabeticamente por secretaria

üéØ VERS√ÉO 3.1 - PROBLEMAS CORRIGIDOS!
    `;
    
    SpreadsheetApp.getUi().alert(
        "üéâ Sistema Corrigido - v3.1!", 
        instrucoes,
        SpreadsheetApp.getUi().ButtonSet.OK
    );
}

/**
 * ========================================================================
 * üéâ RESUMO DAS CORRE√á√ïES IMPLEMENTADAS:
 * 
 * 1. üè∑Ô∏è SIGLA DA SECRETARIA:
 *    ‚ùå Antes: extra√≠a do nome da planilha (pegava parte errada)
 *    ‚úÖ Agora: usa diretamente secretaria.nome do array
 * 
 * 2. üî§ ORDENA√á√ÉO ALFAB√âTICA:
 *    ‚ùå Antes: ordenava os dados depois de coletar
 *    ‚úÖ Agora: ordena as secretarias ANTES do processamento
 * 
 * 3. üìä MAPEAMENTO DE COLUNAS:
 *    ‚úÖ Confirmado: B‚ÜíB, C‚ÜíC, D‚ÜíD, E‚ÜíE, F‚ÜíF, G‚ÜíG, H‚ÜíH, I‚ÜíI, J‚ÜíJ, K‚ÜíK, L‚ÜíL, N‚ÜíM
 *    ‚úÖ In√≠cio dos dados: linha 5 (CONFIG.LINHA_INICIO_DADOS = 4)
 *    ‚úÖ Data da Inclus√£o: coluna N (√≠ndice 12) da origem
 * 
 * 4. üß™ NOVAS FUN√á√ïES DE TESTE:
 *    ‚Ä¢ testeMapemantoColunas() - verifica estrutura
 *    ‚Ä¢ validarEstruturaSecretarias() - testa conectividade
 *    ‚Ä¢ listarSecretariasOrdenadas() - mostra ordem alfab√©tica
 * 
 * 5. üîç VALIDA√á√ÉO DE DADOS:
 *    ‚úÖ Verifica√ß√£o baseada no campo Nome (n√£o linha vazia)
 *    ‚úÖ Logs detalhados para debug
 *    ‚úÖ Contagem precisa de registros por secretaria
 * ========================================================================
 */

// ========================================================================
// FUN√á√ïES COMPLEMENTARES PARA FINALIZAR O SISTEMA
// ========================================================================

/**
* Fun√ß√£o para testar uma secretaria espec√≠fica
*/
function testarSecretariaEspecifica() {
    const opcoes = PLANILHAS_SECRETARIAS.map((s, i) => `${i + 1} - ${s.nome}`);
    
    const resposta = SpreadsheetApp.getUi().prompt(
        "üß™ Testar Secretaria Espec√≠fica",
        `Digite o n√∫mero da secretaria (1-${PLANILHAS_SECRETARIAS.length}):\n\n` + opcoes.join("\n"),
        SpreadsheetApp.getUi().ButtonSet.OK_CANCEL
    );
    
    if (resposta.getSelectedButton() === SpreadsheetApp.getUi().Button.OK) {
        const numero = parseInt(resposta.getResponseText());
        
        if (numero >= 1 && numero <= PLANILHAS_SECRETARIAS.length) {
            const secretaria = PLANILHAS_SECRETARIAS[numero - 1];
            executarTesteDetalhado(secretaria);
        } else {
            SpreadsheetApp.getUi().alert("‚ö†Ô∏è N√∫mero inv√°lido", "Digite um n√∫mero entre 1 e " + PLANILHAS_SECRETARIAS.length);
        }
    }
}

/**
* Executa teste detalhado de uma secretaria
*/
function executarTesteDetalhado(secretaria) {
    Logger.log(`üîç === TESTE DETALHADO: ${secretaria.nome} ===`);
    
    try {
        // Testar processamento
        const resultado = processarSecretariaOtimizada(secretaria);
        
        let relatorio = `
üß™ TESTE DETALHADO - ${secretaria.nome}

üìã INFORMA√á√ïES B√ÅSICAS:
‚Ä¢ ID da Planilha: ${secretaria.id}
‚Ä¢ Sigla Oficial: ${secretaria.nome}
‚Ä¢ Status: ${resultado.sucesso ? '‚úÖ Sucesso' : '‚ùå Erro'}

`;

        if (resultado.sucesso) {
            relatorio += `
üìä DADOS PROCESSADOS:
‚Ä¢ Registros encontrados: ${resultado.dados.length}
‚Ä¢ Sigla usada: ${resultado.siglaSecretaria}

`;

            if (resultado.dados.length > 0) {
                const primeiroRegistro = resultado.dados[0];
                relatorio += `
üîç PRIMEIRO REGISTRO (EXEMPLO):
‚Ä¢ Nome: ${primeiroRegistro[1]}
‚Ä¢ Prontu√°rio: ${primeiroRegistro[2]}
‚Ä¢ Forma√ß√£o: ${primeiroRegistro[3]}
‚Ä¢ √Årea: ${primeiroRegistro[4]}
‚Ä¢ Cargo: ${primeiroRegistro[5]}

`;
            }
        } else {
            relatorio += `
‚ùå ERRO ENCONTRADO:
${resultado.erro}

`;
        }

        relatorio += `üìÖ Teste realizado em: ${new Date().toLocaleString('pt-BR')}`;

        SpreadsheetApp.getUi().alert(
            `üß™ Teste - ${secretaria.nome}`,
            relatorio,
            SpreadsheetApp.getUi().ButtonSet.OK
        );

    } catch (erro) {
        Logger.log(`‚ùå Erro no teste detalhado: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro no Teste",
            `Erro ao testar ${secretaria.nome}:\n${erro.toString()}`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Comparar dados antes e depois (para valida√ß√£o)
*/
function compararDadosAntesDepois() {
    const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
    const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
    
    if (!abaCentral || abaCentral.getLastRow() <= 1) {
        SpreadsheetApp.getUi().alert(
            "‚ÑπÔ∏è Sem Dados para Comparar",
            "Execute uma importa√ß√£o primeiro.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        return;
    }

    const totalLinhas = abaCentral.getLastRow();
    const totalRegistros = totalLinhas - 1;
    
    // Analisar primeira e √∫ltima secretaria para verificar ordena√ß√£o
    const primeiraLinha = abaCentral.getRange(2, 1, 1, 13).getValues()[0];
    const ultimaLinha = abaCentral.getRange(totalLinhas, 1, 1, 13).getValues()[0];
    
    // Contar registros por secretaria
    const dadosSecretaria = abaCentral.getRange(2, 1, totalRegistros, 1).getValues();
    const contadorSecretarias = {};
    
    dadosSecretaria.forEach(linha => {
        const secretaria = linha[0] || "N√ÉO IDENTIFICADA";
        contadorSecretarias[secretaria] = (contadorSecretarias[secretaria] || 0) + 1;
    });

    const secretariasEncontradas = Object.keys(contadorSecretarias).sort();

    let relatorio = `
üîç AN√ÅLISE DE DADOS ATUAIS

üìä ESTAT√çSTICAS:
‚Ä¢ Total de registros: ${totalRegistros}
‚Ä¢ Secretarias encontradas: ${secretariasEncontradas.length}

üî§ VERIFICA√á√ÉO DE ORDENA√á√ÉO:
‚Ä¢ Primeira secretaria: ${primeiraLinha[0]}
‚Ä¢ √öltima secretaria: ${ultimaLinha[0]}
‚Ä¢ Ordena√ß√£o alfab√©tica: ${secretariasEncontradas[0] === primeiraLinha[0] ? '‚úÖ Correta' : '‚ö†Ô∏è Verificar'}

üè¢ SECRETARIAS ENCONTRADAS (${secretariasEncontradas.length}):
${secretariasEncontradas.map(s => `‚Ä¢ ${s}: ${contadorSecretarias[s]} registros`).join('\n')}

üìã EXEMPLO DO PRIMEIRO REGISTRO:
‚Ä¢ Secretaria: ${primeiraLinha[0]}
‚Ä¢ Nome: ${primeiraLinha[1]}
‚Ä¢ Prontu√°rio: ${primeiraLinha[2]}
‚Ä¢ Forma√ß√£o: ${primeiraLinha[3]}

`;

    Logger.log(relatorio);
    
    SpreadsheetApp.getUi().alert(
        "üîç An√°lise de Dados",
        relatorio,
        SpreadsheetApp.getUi().ButtonSet.OK
    );
}

/**
* Fun√ß√£o para corrigir dados existentes (se necess√°rio)
*/
function corrigirDadosExistentes() {
    const resposta = SpreadsheetApp.getUi().alert(
        "üîß Corrigir Dados Existentes",
        "Esta fun√ß√£o vai:\n\n‚Ä¢ Verificar dados atuais\n‚Ä¢ Identificar problemas\n‚Ä¢ Aplicar corre√ß√µes necess√°rias\n\nDeseja continuar?",
        SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    
    if (resposta === SpreadsheetApp.getUi().Button.YES) {
        try {
            const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
            const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
            
            if (!abaCentral || abaCentral.getLastRow() <= 1) {
                SpreadsheetApp.getUi().alert("‚ÑπÔ∏è Nenhum dado para corrigir");
                return;
            }

            const totalLinhas = abaCentral.getLastRow();
            const totalRegistros = totalLinhas - 1;
            
            // Ler todos os dados
            const todosDados = abaCentral.getRange(2, 1, totalRegistros, CABECALHOS_CENTRAL.length).getValues();
            
            // Ordenar alfabeticamente por secretaria
            todosDados.sort((a, b) => {
                const secretariaA = (a[0] || "").toString().toUpperCase();
                const secretariaB = (b[0] || "").toString().toUpperCase();
                return secretariaA.localeCompare(secretariaB);
            });
            
            // Reescrever dados ordenados
            abaCentral.getRange(2, 1, totalRegistros, CABECALHOS_CENTRAL.length).setValues(todosDados);
            
            // Aplicar formata√ß√£o brasileira
            aplicarFormatacaoOtimizada(abaCentral, totalLinhas);
            
            SpreadsheetApp.getUi().alert(
                "‚úÖ Corre√ß√£o Conclu√≠da",
                `Dados reordenados alfabeticamente!\n\nüìä ${totalRegistros} registros processados\nüî§ Ordena√ß√£o por secretaria aplicada`,
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            
        } catch (erro) {
            Logger.log(`‚ùå Erro na corre√ß√£o: ${erro.toString()}`);
            SpreadsheetApp.getUi().alert(
                "‚ùå Erro na Corre√ß√£o",
                "Ocorreu um erro durante a corre√ß√£o dos dados.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
        }
    }
}

/**
* Menu atualizado com todas as fun√ß√µes
*/
function criarMenuCompletoCorrigido() {
    const ui = SpreadsheetApp.getUi();
    
    ui.createMenu("üèõÔ∏è Banco de Talentos v3.1")
        .addItem("üîÑ Importar Dados", "iniciarImportacaoManual")
        .addSeparator()
        .addItem("üìä Atualizar Secretaria Espec√≠fica", "atualizarSecretariaEspecifica")
        .addItem("üîç Verificar Dados Existentes", "verificarDadosExistentes")
        .addItem("üîß Corrigir Dados Existentes", "corrigirDadosExistentes")
        .addItem("üé® Aplicar Formata√ß√£o Brasileira", "aplicarFormatacaoBrasileira")
        .addItem("üìÖ Corrigir Formato de Datas", "corrigirFormatoDatas")
        .addItem("üî≤ Aplicar Cores e Bordas", "aplicarCoresEBordas")
        .addItem("üìù Aplicar Ajuste de Texto", "aplicarAjusteTexto")
        .addSeparator()
        .addSubMenu(ui.createMenu("üß™ Testes e Debug")
            .addItem("üß™ Testar Mapeamento", "testeMapemantoColunas")
            .addItem("üîç Validar Estruturas", "validarEstruturaSecretarias")
            .addItem("üéØ Testar Secretaria Espec√≠fica", "testarSecretariaEspecifica")
            .addItem("üìä Comparar Dados", "compararDadosAntesDepois")
            .addItem("üî§ Listar Secretarias Ordenadas", "listarSecretariasOrdenadas")
            .addItem("üßπ Limpar Logs", "limparLogs"))
        .addSeparator()
        .addItem("üìà Relat√≥rio Completo", "gerarRelatorioCompleto")
        .addItem("üßπ Limpar e Reiniciar", "limparEReiniciar")
        .addSeparator()
        .addItem("‚ÑπÔ∏è Sobre o Sistema", "exibirSobreCorrigido")
        .addToUi();
}

/**
* Informa√ß√µes sobre a vers√£o corrigida
*/
function exibirSobreCorrigido() {
    const sobre = `
üèõÔ∏è SISTEMA BANCO DE TALENTOS v3.1 CORRIGIDO
Programa Governo Eficaz - Santana de Parna√≠ba

üîß CORRE√á√ïES IMPLEMENTADAS:
‚Ä¢ ‚úÖ Sigla das secretarias: usa array PLANILHAS_SECRETARIAS
‚Ä¢ ‚úÖ Mapeamento correto: B‚ÜíB, C‚ÜíC, D‚ÜíD, etc.
‚Ä¢ ‚úÖ Ordena√ß√£o alfab√©tica: antes do processamento
‚Ä¢ ‚úÖ Data da Inclus√£o: coluna N corretamente mapeada
‚Ä¢ ‚úÖ In√≠cio dos dados: linha 5 confirmada
‚Ä¢ ‚úÖ Formata√ß√£o brasileira: DD/MM/YYYY, Calibri 10, cores alternadas, bordas, texto ajustado

üß™ FERRAMENTAS DE TESTE:
‚Ä¢ üß™ Testar Mapeamento - verifica estrutura de colunas
‚Ä¢ üîç Validar Estruturas - testa conectividade com secretarias
‚Ä¢ üéØ Testar Secretaria Espec√≠fica - an√°lise individual
‚Ä¢ üìä Comparar Dados - analisa dados existentes
‚Ä¢ üîß Corrigir Dados Existentes - reordena se necess√°rio

‚ö° PERFORMANCE OTIMIZADA:
‚Ä¢ Processamento em lotes de 5 secretarias
‚Ä¢ Ordena√ß√£o pr√©via das secretarias
‚Ä¢ Logs detalhados para debug
‚Ä¢ Recupera√ß√£o autom√°tica de erros

üé® FORMATA√á√ÉO BRASILEIRA:
‚Ä¢ Fonte: Calibri 10 em toda a planilha
‚Ä¢ Data: DD/MM/YYYY (formato brasileiro)
‚Ä¢ Alinhamento: centralizado vertical e horizontal
‚Ä¢ Texto: quebra de linha ativada, altura ajustada automaticamente
‚Ä¢ Cores alternadas: #ffffff (linhas pares) e #ebeff1 (linhas √≠mpares)
‚Ä¢ Bordas: todas as bordas, cor #ffffff, estilo SOLID_MEDIUM
‚Ä¢ Larguras personalizadas: A(66), B(257), C(68), D(108), E(103), F(168), G(97), H(88), I(76), J(256), K(125), L(170), M(88)

üìä MAPEAMENTO DE COLUNAS CONFIRMADO:
Origem ‚Üí Destino
B (Nome) ‚Üí B (Nome)
C (Prontu√°rio) ‚Üí C (Prontu√°rio) 
D (Forma√ß√£o) ‚Üí D (Forma√ß√£o)
E (√Årea) ‚Üí E (√Årea)
F (Cargo) ‚Üí F (Cargo)
G (CC/FE) ‚Üí G (CC/FE)
H (Fun√ß√£o) ‚Üí H (Fun√ß√£o)
I (Readaptado) ‚Üí I (Readaptado)
J (Justificativa) ‚Üí J (Justificativa)
K (A√ß√£o) ‚Üí K (A√ß√£o)
L (Condicionalidade) ‚Üí L (Condicionalidade)
N (Data da Inclus√£o) ‚Üí M (Data da Inclus√£o)

üéØ COMO USAR A VERS√ÉO CORRIGIDA:
1. Execute "Testar Mapeamento" para verificar estrutura
2. Use "Validar Estruturas" para testar conectividade
3. Execute "Importar Dados" para processamento completo
4. Use "Aplicar Formata√ß√£o Brasileira" para formata√ß√£o personalizada
5. Use "Comparar Dados" para validar resultados

üìû SUPORTE T√âCNICO:
üìß sma.programagovernoeficaz@santanadeparnaiba.sp.gov.br
üì± 4622-7500 - 8819 / 8644 / 7574

üöÄ Vers√£o 3.1 - Problemas Corrigidos!
üìÖ ${new Date().toLocaleDateString('pt-BR')}
    `;
    
    SpreadsheetApp.getUi().alert(
        "‚ÑπÔ∏è Sistema v3.1 - Corrigido",
        sobre,
        SpreadsheetApp.getUi().ButtonSet.OK
    );
}

// ========================================================================
// FUN√á√ïES PRINCIPAIS DO MENU (QUE ESTAVAM FALTANDO)
// ========================================================================

/**
* Inicia importa√ß√£o manual com confirma√ß√£o
*/
function iniciarImportacaoManual() {
    const resposta = SpreadsheetApp.getUi().alert(
        "üîÑ Iniciar Importa√ß√£o",
        `Deseja importar dados de todas as ${PLANILHAS_SECRETARIAS.length} secretarias?\n\n‚è±Ô∏è Tempo estimado: 3-5 minutos\nüìä Os dados ser√£o ordenados alfabeticamente por secretaria`,
        SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    
    if (resposta === SpreadsheetApp.getUi().Button.YES) {
        importarBancoDeTalentosOtimizado();
    }
}

/**
* Cria lotes de planilhas para processamento
*/
function criarLotes(planilhas, tamanhoLote) {
    const lotes = [];
    for (let i = 0; i < planilhas.length; i += tamanhoLote) {
        lotes.push(planilhas.slice(i, i + tamanhoLote));
    }
    return lotes;
}

/**
* Processa um lote de secretarias
*/
function processarLoteSecretarias(lote, numeroLote) {
    Logger.log(`üì¶ Processando lote ${numeroLote} com ${lote.length} planilhas`);
    
    const dadosLote = [];
    const errosLote = [];
    let processadas = 0;
    
    lote.forEach((secretaria, indice) => {
        try {
            const resultado = processarSecretariaOtimizada(secretaria);
            
            if (resultado.sucesso) {
                dadosLote.push(...resultado.dados);
                processadas++;
                Logger.log(`‚úÖ ${resultado.siglaSecretaria}: ${resultado.dados.length} registros`);
            } else {
                errosLote.push(`${secretaria.nome}: ${resultado.erro}`);
                Logger.log(`‚ùå ${secretaria.nome}: ${resultado.erro}`);
            }
            
        } catch (erro) {
            const mensagemErro = `${secretaria.nome}: ${erro.toString()}`;
            errosLote.push(mensagemErro);
            Logger.log(`üí• ${mensagemErro}`);
        }
        
        // Micro pausa entre planilhas do mesmo lote
        Utilities.sleep(200);
    });
    
    return {
        dados: dadosLote,
        processadas: processadas,
        erros: errosLote,
        numeroLote: numeroLote
    };
}

/**
* Prepara planilha central
*/
function prepararPlanilhaCentral() {
    const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
    let abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
    
    if (!abaCentral) {
        Logger.log(`üìã Criando aba "${CONFIG.ABA_CENTRAL}"`);
        abaCentral = planilhaCentral.insertSheet(CONFIG.ABA_CENTRAL);
    }
    
    // Limpar e configurar cabe√ßalhos
    abaCentral.clear();
    const rangeCabecalho = abaCentral.getRange(1, 1, 1, CABECALHOS_CENTRAL.length);
    rangeCabecalho.setValues([CABECALHOS_CENTRAL]);
    
    // Formata√ß√£o do cabe√ßalho com padr√µes brasileiros
    rangeCabecalho
        .setBackground("#1f4e79")
        .setFontColor("#ffffff")
        .setFontWeight("bold")
        .setFontFamily("Calibri")
        .setFontSize(10)
        .setHorizontalAlignment("center")
        .setVerticalAlignment("middle");
    
    abaCentral.setFrozenRows(1);
    
    return { planilhaCentral, abaCentral };
}

/**
* Mostra progresso durante processamento
*/
function mostrarProgresso(loteAtual, totalLotes, tamanheLote) {
    const progresso = `
üîÑ PROCESSANDO DADOS

üìä Progresso: Lote ${loteAtual} de ${totalLotes}
üìÅ Planilhas neste lote: ${tamanheLote}
‚è±Ô∏è Aguarde...

${loteAtual === 1 ? 'üöÄ Iniciando processamento...' : ''}
${loteAtual === totalLotes ? 'üèÅ Lote final - quase pronto!' : ''}
    `;
    
    // Usar toast para n√£o interromper
    SpreadsheetApp.getActive().toast(
        `Processando lote ${loteAtual}/${totalLotes}...`, 
        "üîÑ Importando Dados", 
        5
    );
    
    Logger.log(`üìä Progresso: ${loteAtual}/${totalLotes} - ${tamanheLote} planilhas`);
}

/**
* Converte data para formato brasileiro DD/MM/YYYY
*/
function formatarDataBrasileira(data) {
    if (!data || data === "" || data === null) {
        return "";
    }
    
    try {
        // Se j√° √© uma string no formato correto, retorna
        if (typeof data === "string" && data.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
            return data;
        }
        
        // Se √© um objeto Date, converte
        let dataObj;
        if (data instanceof Date) {
            dataObj = data;
        } else {
            // Tenta converter string para Date
            dataObj = new Date(data);
        }
        
        // Verifica se a data √© v√°lida
        if (isNaN(dataObj.getTime())) {
            return "";
        }
        
        // Formata para DD/MM/YYYY
        const dia = String(dataObj.getDate()).padStart(2, '0');
        const mes = String(dataObj.getMonth() + 1).padStart(2, '0');
        const ano = dataObj.getFullYear();
        
        return `${dia}/${mes}/${ano}`;
        
    } catch (erro) {
        Logger.log(`‚ö†Ô∏è Erro ao formatar data: ${erro.toString()}`);
        return "";
    }
}

/**
* Aplica formata√ß√£o otimizada com padr√µes brasileiros
*/
function aplicarFormatacaoOtimizada(abaCentral, totalLinhas) {
    if (totalLinhas <= 1) return;
    
    try {
        Logger.log("üé® Aplicando formata√ß√£o brasileira...");
        
        // ========================================================================
        // CONFIGURA√á√ïES DE LARGURA DAS COLUNAS (em pixels)
        // ========================================================================
        const largurasColunas = [66, 257, 68, 108, 103, 168, 97, 88, 76, 256, 125, 170, 88];
        
        // Aplicar larguras espec√≠ficas
        largurasColunas.forEach((largura, indice) => {
            abaCentral.setColumnWidth(indice + 1, largura);
        });
        
        // ========================================================================
        // FORMATA√á√ÉO GERAL DA PLANILHA
        // ========================================================================
        
        // Formata√ß√£o do cabe√ßalho (linha 1)
        const rangeCabecalho = abaCentral.getRange(1, 1, 1, CABECALHOS_CENTRAL.length);
        rangeCabecalho
            .setBackground("#1f4e79")
            .setFontColor("#ffffff")
            .setFontWeight("bold")
            .setFontFamily("Calibri")
            .setFontSize(10)
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle");
        
        // Formata√ß√£o dos dados (linhas 2 em diante)
        const rangeDados = abaCentral.getRange(2, 1, totalLinhas - 1, CABECALHOS_CENTRAL.length);
        rangeDados
            .setFontFamily("Calibri")
            .setFontSize(10)
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle")
            .setWrap(true)
            .setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
        
        // ========================================================================
        // FORMATA√á√ÉO ESPEC√çFICA DA COLUNA DE DATA (M)
        // ========================================================================
        const colunaData = abaCentral.getRange(2, 13, totalLinhas - 1, 1); // Coluna M
        colunaData.setNumberFormat("dd/mm/yyyy"); // Formato brasileiro DD/MM/YYYY
        
        // ========================================================================
        // FORMATA√á√ÉO CONDICIONAL E BORDAS
        // ========================================================================
        
        // Aplicar formata√ß√£o condicional e bordas usando fun√ß√£o auxiliar
        aplicarFormatacaoCondicionalEBordas(abaCentral, totalLinhas);
        
        // ========================================================================
        // CONFIGURA√á√ïES ADICIONAIS
        // ========================================================================
        
        // Congelar primeira linha
        abaCentral.setFrozenRows(1);
        
        // Ajustar altura das linhas automaticamente
        for (let i = 2; i <= totalLinhas; i++) {
            abaCentral.autoResizeRows(i);
        }
        
        // Manter altura fixa para o cabe√ßalho
        abaCentral.setRowHeight(1, 25);
        
        Logger.log("‚úÖ Formata√ß√£o brasileira aplicada com sucesso!");
        Logger.log(`üìä Colunas configuradas: ${largurasColunas.join(", ")} pixels`);
        Logger.log("üìÖ Formato de data: DD/MM/YYYY (brasileiro)");
        Logger.log("üî§ Fonte: Calibri 10");
        Logger.log("üé® Cores alternadas: #ffffff e #ebeff1");
        Logger.log("üî≤ Bordas: todas as bordas, cor #ffffff, estilo SOLID_MEDIUM");
        Logger.log("üìù Texto: quebra de linha ativada, altura ajustada automaticamente");
        
    } catch (erro) {
        Logger.log("‚ö†Ô∏è Erro na formata√ß√£o: " + erro.toString());
    }
}

/**
* Exibe resultado otimizado
*/
function exibirResultadoOtimizado(relatorio) {
    const porcentagemSucesso = Math.round((relatorio.secretariasProcessadas / PLANILHAS_SECRETARIAS.length) * 100);
    
    const mensagem = `
üéâ IMPORTA√á√ÉO CONCLU√çDA!

üìä RESULTADOS:
‚Ä¢ Secretarias processadas: ${relatorio.secretariasProcessadas}/${PLANILHAS_SECRETARIAS.length} (${porcentagemSucesso}%)
‚Ä¢ Registros importados: ${relatorio.registrosImportados}
‚Ä¢ Lotes processados: ${relatorio.lotes.length}
‚Ä¢ Dura√ß√£o total: ${relatorio.duracao}s

‚ú® DADOS ORDENADOS ALFABETICAMENTE POR SECRETARIA

${relatorio.erros.length > 0 ? `‚ö†Ô∏è Erros encontrados: ${relatorio.erros.length}\nConsulte os logs para detalhes.` : '‚úÖ Processo executado sem erros!'}

üìÖ Conclu√≠do em: ${relatorio.fim.toLocaleString('pt-BR')}
    `;
    
    SpreadsheetApp.getUi().alert(
        "üèõÔ∏è Banco de Talentos - Sucesso!", 
        mensagem,
        SpreadsheetApp.getUi().ButtonSet.OK
    );
}

/**
* Atualiza apenas uma secretaria espec√≠fica
*/
function atualizarSecretariaEspecifica() {
    // Criar lista de op√ß√µes
    const opcoes = PLANILHAS_SECRETARIAS.map((s, i) => `${i + 1} - ${s.nome}`);
    
    const resposta = SpreadsheetApp.getUi().prompt(
        "üìÇ Atualizar Secretaria Espec√≠fica",
        `Digite o n√∫mero da secretaria (1-${PLANILHAS_SECRETARIAS.length}):\n\n` + opcoes.join("\n"),
        SpreadsheetApp.getUi().ButtonSet.OK_CANCEL
    );
    
    if (resposta.getSelectedButton() === SpreadsheetApp.getUi().Button.OK) {
        const numero = parseInt(resposta.getResponseText());
        
        if (numero >= 1 && numero <= PLANILHAS_SECRETARIAS.length) {
            const secretaria = PLANILHAS_SECRETARIAS[numero - 1];
            atualizarUmaSecretaria(secretaria);
        } else {
            SpreadsheetApp.getUi().alert("‚ö†Ô∏è N√∫mero inv√°lido", "Digite um n√∫mero entre 1 e " + PLANILHAS_SECRETARIAS.length);
        }
    }
}

/**
* Atualiza dados de uma secretaria espec√≠fica
*/
function atualizarUmaSecretaria(secretaria) {
    try {
        Logger.log(`üîÑ Atualizando secretaria: ${secretaria.nome}`);
        
        const resultado = processarSecretariaOtimizada(secretaria);
        
        if (resultado.sucesso) {
            SpreadsheetApp.getUi().alert(
                "‚úÖ Secretaria Atualizada",
                `${resultado.siglaSecretaria}: ${resultado.dados.length} registros processados`,
                SpreadsheetApp.getUi().ButtonSet.OK
            );
        } else {
            SpreadsheetApp.getUi().alert(
                "‚ùå Erro na Atualiza√ß√£o",
                `Erro ao processar ${secretaria.nome}:\n${resultado.erro}`,
                SpreadsheetApp.getUi().ButtonSet.OK
            );
        }
        
    } catch (erro) {
        Logger.log(`‚ùå Erro ao atualizar ${secretaria.nome}: ${erro.toString()}`);
    }
}

/**
* Verifica dados existentes na planilha
*/
function verificarDadosExistentes() {
    try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (!abaCentral) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Nenhum Dado Encontrado",
                "A aba central ainda n√£o foi criada.\nUse 'Importar Dados' primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        const totalLinhas = abaCentral.getLastRow();
        const totalRegistros = Math.max(0, totalLinhas - 1);
        
        if (totalRegistros === 0) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Planilha Vazia",
                "A planilha central n√£o possui dados.\nUse 'Importar Dados' para come√ßar.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        // Contar registros por secretaria
        const dadosSecretaria = abaCentral.getRange(2, 1, totalRegistros, 1).getValues();
        const contadorSecretarias = {};
        
        dadosSecretaria.forEach(linha => {
            const secretaria = linha[0] || "N√ÉO IDENTIFICADA";
            contadorSecretarias[secretaria] = (contadorSecretarias[secretaria] || 0) + 1;
        });
        
        // Ordenar secretarias alfabeticamente
        const secretariasOrdenadas = Object.entries(contadorSecretarias)
            .sort((a, b) => a[0].localeCompare(b[0]));
        
        let relatorio = `
üìä DADOS EXISTENTES NA PLANILHA

üìà RESUMO GERAL:
‚Ä¢ Total de registros: ${totalRegistros}
‚Ä¢ Secretarias identificadas: ${Object.keys(contadorSecretarias).length}

üè¢ DISTRIBUI√á√ÉO POR SECRETARIA (em ordem alfab√©tica):
`;
        
        secretariasOrdenadas.forEach(([secretaria, quantidade]) => {
            relatorio += `‚Ä¢ ${secretaria}: ${quantidade} registros\n`;
        });
        
        relatorio += `
üìÖ Verifica√ß√£o realizada em: ${new Date().toLocaleString('pt-BR')}
        `;
        
        SpreadsheetApp.getUi().alert(
            "üìä Dados Existentes",
            relatorio,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro na verifica√ß√£o: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro na Verifica√ß√£o",
            "Ocorreu um erro ao verificar os dados existentes.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Gera relat√≥rio completo do sistema
*/
function gerarRelatorioCompleto() {
    try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (!abaCentral || abaCentral.getLastRow() <= 1) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Relat√≥rio N√£o Dispon√≠vel",
                "Execute a importa√ß√£o de dados primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        const totalLinhas = abaCentral.getLastRow();
        const totalRegistros = totalLinhas - 1;
        
        // An√°lise detalhada
        const todosOsDados = abaCentral.getRange(2, 1, totalRegistros, CABECALHOS_CENTRAL.length).getValues();
        
        const analise = {
            secretarias: {},
            camposVazios: {},
            estatisticas: {
                comNome: 0,
                comProntuario: 0,
                comFormacao: 0,
                readaptados: 0
            }
        };
        
        // Processar cada registro
        todosOsDados.forEach(linha => {
            const secretaria = linha[0] || "N√ÉO IDENTIFICADA";
            const nome = linha[1] || "";
            const prontuario = linha[2] || "";
            const formacao = linha[3] || "";
            const readaptado = linha[8] || "";
            
            // Contar por secretaria
            analise.secretarias[secretaria] = (analise.secretarias[secretaria] || 0) + 1;
            
            // Estat√≠sticas de preenchimento
            if (nome.toString().trim()) analise.estatisticas.comNome++;
            if (prontuario.toString().trim()) analise.estatisticas.comProntuario++;
            if (formacao.toString().trim()) analise.estatisticas.comFormacao++;
            if (readaptado.toString().trim().toLowerCase().includes('sim')) analise.estatisticas.readaptados++;
            
            // Campos vazios por coluna
            CABECALHOS_CENTRAL.forEach((cabecalho, indice) => {
                if (!linha[indice] || !linha[indice].toString().trim()) {
                    analise.camposVazios[cabecalho] = (analise.camposVazios[cabecalho] || 0) + 1;
                }
            });
        });
        
        // Montar relat√≥rio
        const secretariasOrdenadas = Object.entries(analise.secretarias)
            .sort((a, b) => b[1] - a[1]); // Ordenar por quantidade (maior primeiro)
        
        let relatorioCompleto = `
üìä RELAT√ìRIO COMPLETO DO SISTEMA

üìà ESTAT√çSTICAS GERAIS:
‚Ä¢ Total de registros: ${totalRegistros}
‚Ä¢ Secretarias ativas: ${Object.keys(analise.secretarias).length}
‚Ä¢ Registros com nome: ${analise.estatisticas.comNome} (${Math.round(analise.estatisticas.comNome/totalRegistros*100)}%)
‚Ä¢ Registros com prontu√°rio: ${analise.estatisticas.comProntuario} (${Math.round(analise.estatisticas.comProntuario/totalRegistros*100)}%)
‚Ä¢ Servidores readaptados: ${analise.estatisticas.readaptados}

üè¢ RANKING DE SECRETARIAS (por quantidade de registros):
`;
        
        secretariasOrdenadas.forEach(([secretaria, quantidade], indice) => {
            const porcentagem = Math.round(quantidade/totalRegistros*100);
            relatorioCompleto += `${indice + 1}. ${secretaria}: ${quantidade} (${porcentagem}%)\n`;
        });
        
        relatorioCompleto += `
üìä QUALIDADE DOS DADOS (campos com maior √≠ndice de preenchimento):
`;
        
        const camposOrdenados = Object.entries(analise.camposVazios)
            .sort((a, b) => a[1] - b[1]) // Menos vazios primeiro
            .slice(0, 5);
        
        camposOrdenados.forEach(([campo, vazios]) => {
            const preenchidos = totalRegistros - vazios;
            const porcentagem = Math.round(preenchidos/totalRegistros*100);
            relatorioCompleto += `‚Ä¢ ${campo}: ${porcentagem}% preenchido\n`;
        });
        
        relatorioCompleto += `
üìÖ Relat√≥rio gerado em: ${new Date().toLocaleString('pt-BR')}
üîÑ Para dados atualizados, execute nova importa√ß√£o
        `;
        
        SpreadsheetApp.getUi().alert(
            "üìä Relat√≥rio Completo",
            relatorioCompleto,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro no relat√≥rio: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro no Relat√≥rio",
            "Ocorreu um erro ao gerar o relat√≥rio completo.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Limpa dados e reinicia sistema
*/
function limparEReiniciar() {
    const resposta = SpreadsheetApp.getUi().alert(
        "‚ö†Ô∏è Confirmar Limpeza Total",
        "Esta a√ß√£o ir√°:\n\n‚Ä¢ Remover TODOS os dados importados\n‚Ä¢ Manter apenas os cabe√ßalhos\n‚Ä¢ Permitir uma importa√ß√£o limpa\n\n‚ùó Esta a√ß√£o N√ÉO pode ser desfeita!\n\nDeseja continuar?",
        SpreadsheetApp.getUi().ButtonSet.YES_NO
    );
    
    if (resposta === SpreadsheetApp.getUi().Button.YES) {
        try {
            const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
            const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
            
            if (abaCentral) {
                // Limpar tudo exceto cabe√ßalhos
                const ultimaLinha = abaCentral.getLastRow();
                if (ultimaLinha > 1) {
                    abaCentral.getRange(2, 1, ultimaLinha - 1, abaCentral.getLastColumn()).clearContent();
                    abaCentral.getRange(2, 1, ultimaLinha - 1, abaCentral.getLastColumn()).clearFormat();
                }
                
                // Reconfigurar cabe√ßalhos com formata√ß√£o brasileira
                const rangeCabecalho = abaCentral.getRange(1, 1, 1, CABECALHOS_CENTRAL.length);
                rangeCabecalho.setValues([CABECALHOS_CENTRAL]);
                rangeCabecalho
                    .setBackground("#1f4e79")
                    .setFontColor("#ffffff")
                    .setFontWeight("bold")
                    .setFontFamily("Calibri")
                    .setFontSize(10)
                    .setHorizontalAlignment("center")
                    .setVerticalAlignment("middle");
            }
            
            SpreadsheetApp.getUi().alert(
                "‚úÖ Sistema Reiniciado",
                "Todos os dados foram removidos com sucesso!\n\nüöÄ Sistema pronto para nova importa√ß√£o.\n\nUse 'Importar Dados' quando necess√°rio.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            
            Logger.log("üßπ Sistema reiniciado - dados limpos");
            
        } catch (erro) {
            Logger.log(`‚ùå Erro na limpeza: ${erro.toString()}`);
            SpreadsheetApp.getUi().alert(
                "‚ùå Erro na Limpeza",
                "Ocorreu um erro durante a limpeza dos dados.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
        }
    }
}

/**
* Corrigir formato de datas em planilha existente
*/
function corrigirFormatoDatas() {
    try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (!abaCentral) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Aba N√£o Encontrada",
                "A aba central n√£o foi encontrada.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        const totalLinhas = abaCentral.getLastRow();
        
        if (totalLinhas <= 1) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Sem Dados",
                "N√£o h√° dados para corrigir.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        // Ler dados da coluna M (Data da Inclus√£o)
        const colunaData = abaCentral.getRange(2, 13, totalLinhas - 1, 1);
        const dadosData = colunaData.getValues();
        
        // Converter cada data para formato brasileiro
        const datasCorrigidas = dadosData.map(linha => {
            const dataOriginal = linha[0];
            return [formatarDataBrasileira(dataOriginal)];
        });
        
        // Aplicar as datas corrigidas
        colunaData.setValues(datasCorrigidas);
        
        // Aplicar formata√ß√£o de data
        colunaData.setNumberFormat("dd/mm/yyyy");
        
        SpreadsheetApp.getUi().alert(
            "‚úÖ Datas Corrigidas",
            `Formato de datas corrigido com sucesso!\n\nüìä ${totalLinhas - 1} registros processados\nüìÖ Formato: DD/MM/YYYY (brasileiro)`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro na corre√ß√£o de datas: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro na Corre√ß√£o",
            "Ocorreu um erro ao corrigir o formato das datas.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Aplicar formata√ß√£o condicional e bordas (fun√ß√£o auxiliar)
*/
function aplicarFormatacaoCondicionalEBordas(abaCentral, totalLinhas) {
    try {
        Logger.log("üé® Aplicando formata√ß√£o condicional e bordas...");
        
        // ========================================================================
        // FORMATA√á√ÉO CONDICIONAL COM CORES ALTERNADAS
        // ========================================================================
        
        // Aplicar cores alternadas nas linhas de dados
        for (let i = 2; i <= totalLinhas; i++) {
            const linha = abaCentral.getRange(i, 1, 1, CABECALHOS_CENTRAL.length);
            const corFundo = (i % 2 === 0) ? "#ffffff" : "#ebeff1";
            linha.setBackground(corFundo);
        }
        
        // Garantir que a coluna secretaria mantenha sua cor especial
        const colunaSecretaria = abaCentral.getRange(2, 1, totalLinhas - 1, 1);
        colunaSecretaria.setBackground("#e8f4fd");
        colunaSecretaria.setFontWeight("bold");
        
        // ========================================================================
        // BORDAS E ESTILO
        // ========================================================================
        
        // Aplicar bordas em toda a planilha
        const rangeCompleto = abaCentral.getRange(1, 1, totalLinhas, CABECALHOS_CENTRAL.length);
        
        // Aplicar bordas externas
        rangeCompleto.setBorder(
            true, true, true, true, false, false, // bordas externas
            "#ffffff", // cor da borda
            SpreadsheetApp.BorderStyle.SOLID_MEDIUM // estilo
        );
        
        // Aplicar bordas internas (grade)
        rangeCompleto.setBorder(
            false, false, false, false, true, true, // bordas internas
            "#ffffff", // cor da borda
            SpreadsheetApp.BorderStyle.SOLID // estilo mais fino para grade
        );
        
        Logger.log("‚úÖ Formata√ß√£o condicional e bordas aplicadas!");
        
    } catch (erro) {
        Logger.log("‚ö†Ô∏è Erro na formata√ß√£o condicional: " + erro.toString());
    }
}

/**
* Aplicar ajuste de texto e quebra de linha
*/
function aplicarAjusteTexto() {
    try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (!abaCentral) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Aba N√£o Encontrada",
                "A aba central n√£o foi encontrada.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        const totalLinhas = abaCentral.getLastRow();
        
        if (totalLinhas <= 1) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Sem Dados",
                "N√£o h√° dados para formatar.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        Logger.log("üìù Aplicando ajuste de texto e quebra de linha...");
        
        // Formata√ß√£o dos dados (linhas 2 em diante)
        const rangeDados = abaCentral.getRange(2, 1, totalLinhas - 1, CABECALHOS_CENTRAL.length);
        rangeDados
            .setWrap(true)
            .setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP)
            .setHorizontalAlignment("center")
            .setVerticalAlignment("middle");
        
        // Ajustar altura das linhas automaticamente
        for (let i = 2; i <= totalLinhas; i++) {
            abaCentral.autoResizeRows(i);
        }
        
        SpreadsheetApp.getUi().alert(
            "‚úÖ Ajuste de Texto Aplicado",
            `Ajuste de texto e quebra de linha aplicados com sucesso!\n\nüìä ${totalLinhas - 1} registros formatados\nüìù Quebra de linha: ativada\nüìè Altura das linhas: ajustada automaticamente`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro no ajuste de texto: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro no Ajuste",
            "Ocorreu um erro ao aplicar o ajuste de texto.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Aplicar apenas cores alternadas e bordas
*/
function aplicarCoresEBordas() {
    try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (!abaCentral) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Aba N√£o Encontrada",
                "A aba central n√£o foi encontrada.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        const totalLinhas = abaCentral.getLastRow();
        
        if (totalLinhas <= 1) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Sem Dados",
                "N√£o h√° dados para formatar.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        // Aplicar formata√ß√£o condicional e bordas
        aplicarFormatacaoCondicionalEBordas(abaCentral, totalLinhas);
        
        SpreadsheetApp.getUi().alert(
            "‚úÖ Cores e Bordas Aplicadas",
            `Formata√ß√£o condicional e bordas aplicadas com sucesso!\n\nüìä ${totalLinhas - 1} registros formatados\nüé® Cores alternadas: #ffffff e #ebeff1\nüî≤ Bordas: todas as bordas, cor #ffffff`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro na formata√ß√£o: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro na Formata√ß√£o",
            "Ocorreu um erro ao aplicar cores e bordas.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Aplicar formata√ß√£o brasileira em planilha existente
*/
function aplicarFormatacaoBrasileira() {
    try {
        const planilhaCentral = SpreadsheetApp.getActiveSpreadsheet();
        const abaCentral = planilhaCentral.getSheetByName(CONFIG.ABA_CENTRAL);
        
        if (!abaCentral) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Aba N√£o Encontrada",
                "A aba central n√£o foi encontrada.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        const totalLinhas = abaCentral.getLastRow();
        
        if (totalLinhas <= 1) {
            SpreadsheetApp.getUi().alert(
                "‚ÑπÔ∏è Sem Dados",
                "N√£o h√° dados para formatar.\nExecute a importa√ß√£o primeiro.",
                SpreadsheetApp.getUi().ButtonSet.OK
            );
            return;
        }
        
        // Aplicar formata√ß√£o brasileira
        aplicarFormatacaoOtimizada(abaCentral, totalLinhas);
        
        SpreadsheetApp.getUi().alert(
            "‚úÖ Formata√ß√£o Aplicada",
            `Formata√ß√£o brasileira aplicada com sucesso!\n\nüìä ${totalLinhas - 1} registros formatados\nüî§ Fonte: Calibri 10\nüìÖ Data: DD/MM/YYYY\nüìù Texto: ajustado automaticamente\nüé® Cores alternadas: #ffffff e #ebeff1\nüî≤ Bordas: todas as bordas, cor #ffffff\nüìè Colunas: larguras personalizadas`,
            SpreadsheetApp.getUi().ButtonSet.OK
        );
        
    } catch (erro) {
        Logger.log(`‚ùå Erro na formata√ß√£o: ${erro.toString()}`);
        SpreadsheetApp.getUi().alert(
            "‚ùå Erro na Formata√ß√£o",
            "Ocorreu um erro ao aplicar a formata√ß√£o brasileira.",
            SpreadsheetApp.getUi().ButtonSet.OK
        );
    }
}

/**
* Limpar logs para debug
*/
function limparLogs() {
    console.clear();
    Logger.log("üßπ Logs limpos - " + new Date().toLocaleString('pt-BR'));
    SpreadsheetApp.getActive().toast("Logs limpos!", "üßπ Debug", 2);
}

/**
* Valida√ß√£o da configura√ß√£o do sistema
*/
function validarConfiguracao() {
    Logger.log("üîç === VALIDA√á√ÉO DO SISTEMA ===");
    
    const problemas = [];
    
    // Validar IDs das planilhas
    if (PLANILHAS_SECRETARIAS.length !== 23) {
        problemas.push(`‚ùå Esperadas 23 planilhas, encontradas ${PLANILHAS_SECRETARIAS.length}`);
    }
    
    // Validar cabe√ßalhos
    if (CABECALHOS_CENTRAL.length !== 13) {
        problemas.push(`‚ùå Esperados 13 cabe√ßalhos, encontrados ${CABECALHOS_CENTRAL.length}`);
    }
    
    // Validar configura√ß√µes
    if (CONFIG.LOTE_SIZE < 1 || CONFIG.LOTE_SIZE > 10) {
        problemas.push(`‚ùå Tamanho do lote inv√°lido: ${CONFIG.LOTE_SIZE}`);
    }
    
    if (problemas.length === 0) {
        Logger.log("‚úÖ Sistema validado - configura√ß√£o correta");
        return true;
    } else {
        Logger.log("‚ùå Problemas encontrados:");
        problemas.forEach(p => Logger.log(p));
        return false;
    }
}

/**
* Fun√ß√£o de inicializa√ß√£o atualizada
*/
function onOpen() {
    try {
        criarMenuCompletoCorrigido();
        Logger.log("‚úÖ Menu completo corrigido criado");
        
        // Mostrar instru√ß√µes da vers√£o corrigida
        mostrarInstrucoesCorrigidas();
        
    } catch (erro) {
        Logger.log("‚ùå Erro na inicializa√ß√£o v3.1: " + erro.toString());
    }
}

/**
* Mostra instru√ß√µes da vers√£o corrigida
*/
function mostrarInstrucoesCorrigidas() {
    const instrucoes = `
üèõÔ∏è SISTEMA BANCO DE TALENTOS - VERS√ÉO 3.1 CORRIGIDA

üîß CORRE√á√ïES IMPLEMENTADAS:
‚Ä¢ ‚úÖ Sigla das secretarias: agora usa o array PLANILHAS_SECRETARIAS
‚Ä¢ ‚úÖ Mapeamento de colunas: corrigido conforme especifica√ß√£o
‚Ä¢ ‚úÖ Ordena√ß√£o alfab√©tica: secretarias sempre ordenadas
‚Ä¢ ‚úÖ In√≠cio dos dados: confirmado linha 5 (√≠ndice 4)

üß™ NOVAS OP√á√ïES DE TESTE:
‚Ä¢ "Testar Mapeamento" - verifica se as colunas est√£o corretas
‚Ä¢ "Validar Estruturas" - testa todas as secretarias
‚Ä¢ "Listar Secretarias Ordenadas" - mostra ordem alfab√©tica

‚ö° COMO USAR:
1. Execute "Testar Mapeamento" primeiro para verificar
2. Use "Importar Dados" para processamento completo
3. Dados ficar√£o ordenados alfabeticamente por secretaria

üéØ VERS√ÉO 3.1 - PROBLEMAS CORRIGIDOS!
    `;
    
    SpreadsheetApp.getUi().alert(
        "üéâ Sistema Corrigido - v3.1!", 
        instrucoes,
        SpreadsheetApp.getUi().ButtonSet.OK
    );
}